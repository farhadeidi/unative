// This file is auto-generated by @hey-api/openapi-ts

import type { OptionsLegacyParser } from "@hey-api/client-fetch";
import {
  type InfiniteData,
  infiniteQueryOptions,
  queryOptions,
  type UseMutationOptions,
} from "@tanstack/react-query";

import {
  accountAddFavorite,
  accountAddToWatchlist,
  accountDetails,
  accountFavoriteTv,
  accountGetFavorites,
  accountLists,
  accountRatedMovies,
  accountRatedTv,
  accountRatedTvEpisodes,
  accountWatchlistMovies,
  accountWatchlistTv,
  alternativeNamesCopy,
  authenticationCreateGuestSession,
  authenticationCreateRequestToken,
  authenticationCreateSession,
  authenticationCreateSessionFromLogin,
  authenticationCreateSessionFromV4Token,
  authenticationDeleteSession,
  authenticationValidateKey,
  certificationMovieList,
  certificationsTvList,
  changesMovieList,
  changesPeopleList,
  changesTvList,
  client,
  collectionDetails,
  collectionImages,
  collectionTranslations,
  companyAlternativeNames,
  companyDetails,
  companyImages,
  configurationCountries,
  configurationDetails,
  configurationJobs,
  configurationLanguages,
  configurationPrimaryTranslations,
  configurationTimezones,
  creditDetails,
  detailsCopy,
  discoverMovie,
  discoverTv,
  findById,
  genreMovieList,
  genreTvList,
  guestSessionRatedMovies,
  guestSessionRatedTv,
  guestSessionRatedTvEpisodes,
  keywordDetails,
  keywordMovies,
  listAddMovie,
  listCheckItemStatus,
  listClear,
  listCreate,
  listDelete,
  listDetails,
  listRemoveMovie,
  listsCopy,
  movieAccountStates,
  movieAddRating,
  movieAlternativeTitles,
  movieChanges,
  movieCredits,
  movieDeleteRating,
  movieDetails,
  movieExternalIds,
  movieImages,
  movieKeywords,
  movieLatestId,
  movieLists,
  movieNowPlayingList,
  moviePopularList,
  movieRecommendations,
  movieReleaseDates,
  movieReviews,
  movieSimilar,
  movieTopRatedList,
  movieTranslations,
  movieUpcomingList,
  movieVideos,
  movieWatchProviders,
  networkDetails,
  personChanges,
  personCombinedCredits,
  personDetails,
  personExternalIds,
  personImages,
  personLatestId,
  personMovieCredits,
  personPopularList,
  personTaggedImages,
  personTvCredits,
  reviewDetails,
  searchCollection,
  searchCompany,
  searchKeyword,
  searchMovie,
  searchMulti,
  searchPerson,
  searchTv,
  translations,
  trendingAll,
  trendingMovies,
  trendingPeople,
  trendingTv,
  tvEpisodeAccountStates,
  tvEpisodeAddRating,
  tvEpisodeChangesById,
  tvEpisodeCredits,
  tvEpisodeDeleteRating,
  tvEpisodeDetails,
  tvEpisodeExternalIds,
  tvEpisodeGroupDetails,
  tvEpisodeImages,
  tvEpisodeTranslations,
  tvEpisodeVideos,
  tvSeasonAccountStates,
  tvSeasonAggregateCredits,
  tvSeasonChangesById,
  tvSeasonCredits,
  tvSeasonDetails,
  tvSeasonExternalIds,
  tvSeasonImages,
  tvSeasonTranslations,
  tvSeasonVideos,
  tvSeasonWatchProviders,
  tvSeriesAccountStates,
  tvSeriesAddRating,
  tvSeriesAggregateCredits,
  tvSeriesAiringTodayList,
  tvSeriesAlternativeTitles,
  tvSeriesChanges,
  tvSeriesContentRatings,
  tvSeriesCredits,
  tvSeriesDeleteRating,
  tvSeriesDetails,
  tvSeriesEpisodeGroups,
  tvSeriesExternalIds,
  tvSeriesImages,
  tvSeriesKeywords,
  tvSeriesLatestId,
  tvSeriesOnTheAirList,
  tvSeriesPopularList,
  tvSeriesRecommendations,
  tvSeriesReviews,
  tvSeriesScreenedTheatrically,
  tvSeriesSimilar,
  tvSeriesTopRatedList,
  tvSeriesTranslations,
  tvSeriesVideos,
  tvSeriesWatchProviders,
  watchProvidersAvailableRegions,
  watchProvidersMovieList,
  watchProviderTvList,
} from "../sdk.gen";
import type {
  AccountAddFavoriteData,
  AccountAddFavoriteError,
  AccountAddFavoriteResponse,
  AccountAddToWatchlistData,
  AccountAddToWatchlistError,
  AccountAddToWatchlistResponse,
  AccountDetailsData,
  AccountFavoriteTvData,
  AccountFavoriteTvError,
  AccountFavoriteTvResponse,
  AccountGetFavoritesData,
  AccountGetFavoritesError,
  AccountGetFavoritesResponse,
  AccountListsData,
  AccountListsError,
  AccountListsResponse,
  AccountRatedMoviesData,
  AccountRatedMoviesError,
  AccountRatedMoviesResponse,
  AccountRatedTvData,
  AccountRatedTvEpisodesData,
  AccountRatedTvEpisodesError,
  AccountRatedTvEpisodesResponse,
  AccountRatedTvError,
  AccountRatedTvResponse,
  AccountWatchlistMoviesData,
  AccountWatchlistMoviesError,
  AccountWatchlistMoviesResponse,
  AccountWatchlistTvData,
  AccountWatchlistTvError,
  AccountWatchlistTvResponse,
  AlternativeNamesCopyData,
  AuthenticationCreateSessionData,
  AuthenticationCreateSessionError,
  AuthenticationCreateSessionFromLoginData,
  AuthenticationCreateSessionFromLoginError,
  AuthenticationCreateSessionFromLoginResponse,
  AuthenticationCreateSessionFromV4TokenData,
  AuthenticationCreateSessionFromV4TokenError,
  AuthenticationCreateSessionFromV4TokenResponse,
  AuthenticationCreateSessionResponse,
  AuthenticationDeleteSessionData,
  AuthenticationDeleteSessionError,
  AuthenticationDeleteSessionResponse,
  ChangesMovieListData,
  ChangesMovieListError,
  ChangesMovieListResponse,
  ChangesPeopleListData,
  ChangesPeopleListError,
  ChangesPeopleListResponse,
  ChangesTvListData,
  ChangesTvListError,
  ChangesTvListResponse,
  CollectionDetailsData,
  CollectionImagesData,
  CollectionTranslationsData,
  CompanyAlternativeNamesData,
  CompanyDetailsData,
  CompanyImagesData,
  ConfigurationCountriesData,
  CreditDetailsData,
  DetailsCopyData,
  DiscoverMovieData,
  DiscoverMovieError,
  DiscoverMovieResponse,
  DiscoverTvData,
  DiscoverTvError,
  DiscoverTvResponse,
  FindByIdData,
  GenreMovieListData,
  GenreTvListData,
  GuestSessionRatedMoviesData,
  GuestSessionRatedMoviesError,
  GuestSessionRatedMoviesResponse,
  GuestSessionRatedTvData,
  GuestSessionRatedTvEpisodesData,
  GuestSessionRatedTvEpisodesError,
  GuestSessionRatedTvEpisodesResponse,
  GuestSessionRatedTvError,
  GuestSessionRatedTvResponse,
  KeywordDetailsData,
  KeywordMoviesData,
  KeywordMoviesError,
  KeywordMoviesResponse,
  ListAddMovieData,
  ListAddMovieError,
  ListAddMovieResponse,
  ListCheckItemStatusData,
  ListClearData,
  ListClearError,
  ListClearResponse,
  ListCreateData,
  ListCreateError,
  ListCreateResponse,
  ListDeleteData,
  ListDeleteError,
  ListDeleteResponse,
  ListDetailsData,
  ListDetailsError,
  ListDetailsResponse,
  ListRemoveMovieData,
  ListRemoveMovieError,
  ListRemoveMovieResponse,
  ListsCopyData,
  ListsCopyError,
  ListsCopyResponse,
  MovieAccountStatesData,
  MovieAddRatingData,
  MovieAddRatingError,
  MovieAddRatingResponse,
  MovieAlternativeTitlesData,
  MovieChangesData,
  MovieChangesError,
  MovieChangesResponse,
  MovieCreditsData,
  MovieDeleteRatingData,
  MovieDeleteRatingError,
  MovieDeleteRatingResponse,
  MovieDetailsData,
  MovieExternalIdsData,
  MovieImagesData,
  MovieKeywordsData,
  MovieListsData,
  MovieListsError,
  MovieListsResponse,
  MovieNowPlayingListData,
  MovieNowPlayingListError,
  MovieNowPlayingListResponse,
  MoviePopularListData,
  MoviePopularListError,
  MoviePopularListResponse,
  MovieRecommendationsData,
  MovieRecommendationsError,
  MovieRecommendationsResponse,
  MovieReleaseDatesData,
  MovieReviewsData,
  MovieReviewsError,
  MovieReviewsResponse,
  MovieSimilarData,
  MovieSimilarError,
  MovieSimilarResponse,
  MovieTopRatedListData,
  MovieTopRatedListError,
  MovieTopRatedListResponse,
  MovieTranslationsData,
  MovieUpcomingListData,
  MovieUpcomingListError,
  MovieUpcomingListResponse,
  MovieVideosData,
  MovieWatchProvidersData,
  NetworkDetailsData,
  PersonChangesData,
  PersonChangesError,
  PersonChangesResponse,
  PersonCombinedCreditsData,
  PersonDetailsData,
  PersonExternalIdsData,
  PersonImagesData,
  PersonMovieCreditsData,
  PersonPopularListData,
  PersonPopularListError,
  PersonPopularListResponse,
  PersonTaggedImagesData,
  PersonTaggedImagesError,
  PersonTaggedImagesResponse,
  PersonTvCreditsData,
  ReviewDetailsData,
  SearchCollectionData,
  SearchCollectionError,
  SearchCollectionResponse,
  SearchCompanyData,
  SearchCompanyError,
  SearchCompanyResponse,
  SearchKeywordData,
  SearchKeywordError,
  SearchKeywordResponse,
  SearchMovieData,
  SearchMovieError,
  SearchMovieResponse,
  SearchMultiData,
  SearchMultiError,
  SearchMultiResponse,
  SearchPersonData,
  SearchPersonError,
  SearchPersonResponse,
  SearchTvData,
  SearchTvError,
  SearchTvResponse,
  TranslationsData,
  TrendingAllData,
  TrendingMoviesData,
  TrendingPeopleData,
  TrendingTvData,
  TvEpisodeAccountStatesData,
  TvEpisodeAddRatingData,
  TvEpisodeAddRatingError,
  TvEpisodeAddRatingResponse,
  TvEpisodeChangesByIdData,
  TvEpisodeCreditsData,
  TvEpisodeDeleteRatingData,
  TvEpisodeDeleteRatingError,
  TvEpisodeDeleteRatingResponse,
  TvEpisodeDetailsData,
  TvEpisodeExternalIdsData,
  TvEpisodeGroupDetailsData,
  TvEpisodeImagesData,
  TvEpisodeTranslationsData,
  TvEpisodeVideosData,
  TvSeasonAccountStatesData,
  TvSeasonAggregateCreditsData,
  TvSeasonChangesByIdData,
  TvSeasonChangesByIdError,
  TvSeasonChangesByIdResponse,
  TvSeasonCreditsData,
  TvSeasonDetailsData,
  TvSeasonExternalIdsData,
  TvSeasonImagesData,
  TvSeasonTranslationsData,
  TvSeasonVideosData,
  TvSeasonWatchProvidersData,
  TvSeriesAccountStatesData,
  TvSeriesAddRatingData,
  TvSeriesAddRatingError,
  TvSeriesAddRatingResponse,
  TvSeriesAggregateCreditsData,
  TvSeriesAiringTodayListData,
  TvSeriesAiringTodayListError,
  TvSeriesAiringTodayListResponse,
  TvSeriesAlternativeTitlesData,
  TvSeriesChangesData,
  TvSeriesChangesError,
  TvSeriesChangesResponse,
  TvSeriesContentRatingsData,
  TvSeriesCreditsData,
  TvSeriesDeleteRatingData,
  TvSeriesDeleteRatingError,
  TvSeriesDeleteRatingResponse,
  TvSeriesDetailsData,
  TvSeriesEpisodeGroupsData,
  TvSeriesExternalIdsData,
  TvSeriesImagesData,
  TvSeriesKeywordsData,
  TvSeriesOnTheAirListData,
  TvSeriesOnTheAirListError,
  TvSeriesOnTheAirListResponse,
  TvSeriesPopularListData,
  TvSeriesPopularListError,
  TvSeriesPopularListResponse,
  TvSeriesRecommendationsData,
  TvSeriesRecommendationsError,
  TvSeriesRecommendationsResponse,
  TvSeriesReviewsData,
  TvSeriesReviewsError,
  TvSeriesReviewsResponse,
  TvSeriesScreenedTheatricallyData,
  TvSeriesSimilarData,
  TvSeriesSimilarError,
  TvSeriesSimilarResponse,
  TvSeriesTopRatedListData,
  TvSeriesTopRatedListError,
  TvSeriesTopRatedListResponse,
  TvSeriesTranslationsData,
  TvSeriesVideosData,
  TvSeriesWatchProvidersData,
  WatchProvidersAvailableRegionsData,
  WatchProvidersMovieListData,
  WatchProviderTvListData,
} from "../types.gen";

type QueryKey<TOptions extends OptionsLegacyParser> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
  },
];

const createQueryKey = <TOptions extends OptionsLegacyParser>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
): QueryKey<TOptions>[0] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? client).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return params;
};

export const searchMovieQueryKey = (
  options: OptionsLegacyParser<SearchMovieData>,
) => [createQueryKey("searchMovie", options)];

export const searchMovieOptions = (
  options: OptionsLegacyParser<SearchMovieData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchMovie({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchMovieQueryKey(options),
  });
};

const createInfiniteParams = <
  K extends Pick<
    QueryKey<OptionsLegacyParser>[0],
    "body" | "headers" | "path" | "query"
  >,
>(
  queryKey: QueryKey<OptionsLegacyParser>,
  page: K,
) => {
  const params = queryKey[0];
  if (page.body) {
    params.body = {
      ...(queryKey[0].body as any),
      ...(page.body as any),
    };
  }
  if (page.headers) {
    params.headers = {
      ...queryKey[0].headers,
      ...page.headers,
    };
  }
  if (page.path) {
    params.path = {
      ...queryKey[0].path,
      ...page.path,
    };
  }
  if (page.query) {
    params.query = {
      ...queryKey[0].query,
      ...page.query,
    };
  }
  return params as unknown as typeof page;
};

export const searchMovieInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchMovieData>,
): QueryKey<OptionsLegacyParser<SearchMovieData>> => [
  createQueryKey("searchMovie", options, true),
];

export const searchMovieInfiniteOptions = (
  options: OptionsLegacyParser<SearchMovieData>,
) => {
  return infiniteQueryOptions<
    SearchMovieResponse,
    SearchMovieError,
    InfiniteData<SearchMovieResponse>,
    QueryKey<OptionsLegacyParser<SearchMovieData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchMovieData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchMovieData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchMovie({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchMovieInfiniteQueryKey(options),
    },
  );
};

export const discoverMovieQueryKey = (
  options?: OptionsLegacyParser<DiscoverMovieData>,
) => [createQueryKey("discoverMovie", options)];

export const discoverMovieOptions = (
  options?: OptionsLegacyParser<DiscoverMovieData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await discoverMovie({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: discoverMovieQueryKey(options),
  });
};

export const discoverMovieInfiniteQueryKey = (
  options?: OptionsLegacyParser<DiscoverMovieData>,
): QueryKey<OptionsLegacyParser<DiscoverMovieData>> => [
  createQueryKey("discoverMovie", options, true),
];

export const discoverMovieInfiniteOptions = (
  options?: OptionsLegacyParser<DiscoverMovieData>,
) => {
  return infiniteQueryOptions<
    DiscoverMovieResponse,
    DiscoverMovieError,
    InfiniteData<DiscoverMovieResponse>,
    QueryKey<OptionsLegacyParser<DiscoverMovieData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<DiscoverMovieData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<DiscoverMovieData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await discoverMovie({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: discoverMovieInfiniteQueryKey(options),
    },
  );
};

export const movieDetailsQueryKey = (
  options: OptionsLegacyParser<MovieDetailsData>,
) => [createQueryKey("movieDetails", options)];

export const movieDetailsOptions = (
  options: OptionsLegacyParser<MovieDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieDetailsQueryKey(options),
  });
};

export const tvSeriesDetailsQueryKey = (
  options: OptionsLegacyParser<TvSeriesDetailsData>,
) => [createQueryKey("tvSeriesDetails", options)];

export const tvSeriesDetailsOptions = (
  options: OptionsLegacyParser<TvSeriesDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesDetailsQueryKey(options),
  });
};

export const searchTvQueryKey = (
  options: OptionsLegacyParser<SearchTvData>,
) => [createQueryKey("searchTv", options)];

export const searchTvOptions = (options: OptionsLegacyParser<SearchTvData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchTvQueryKey(options),
  });
};

export const searchTvInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchTvData>,
): QueryKey<OptionsLegacyParser<SearchTvData>> => [
  createQueryKey("searchTv", options, true),
];

export const searchTvInfiniteOptions = (
  options: OptionsLegacyParser<SearchTvData>,
) => {
  return infiniteQueryOptions<
    SearchTvResponse,
    SearchTvError,
    InfiniteData<SearchTvResponse>,
    QueryKey<OptionsLegacyParser<SearchTvData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchTvData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchTvData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchTv({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchTvInfiniteQueryKey(options),
    },
  );
};

export const searchMultiQueryKey = (
  options: OptionsLegacyParser<SearchMultiData>,
) => [createQueryKey("searchMulti", options)];

export const searchMultiOptions = (
  options: OptionsLegacyParser<SearchMultiData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchMulti({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchMultiQueryKey(options),
  });
};

export const searchMultiInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchMultiData>,
): QueryKey<OptionsLegacyParser<SearchMultiData>> => [
  createQueryKey("searchMulti", options, true),
];

export const searchMultiInfiniteOptions = (
  options: OptionsLegacyParser<SearchMultiData>,
) => {
  return infiniteQueryOptions<
    SearchMultiResponse,
    SearchMultiError,
    InfiniteData<SearchMultiResponse>,
    QueryKey<OptionsLegacyParser<SearchMultiData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchMultiData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchMultiData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchMulti({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchMultiInfiniteQueryKey(options),
    },
  );
};

export const searchPersonQueryKey = (
  options: OptionsLegacyParser<SearchPersonData>,
) => [createQueryKey("searchPerson", options)];

export const searchPersonOptions = (
  options: OptionsLegacyParser<SearchPersonData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchPerson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchPersonQueryKey(options),
  });
};

export const searchPersonInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchPersonData>,
): QueryKey<OptionsLegacyParser<SearchPersonData>> => [
  createQueryKey("searchPerson", options, true),
];

export const searchPersonInfiniteOptions = (
  options: OptionsLegacyParser<SearchPersonData>,
) => {
  return infiniteQueryOptions<
    SearchPersonResponse,
    SearchPersonError,
    InfiniteData<SearchPersonResponse>,
    QueryKey<OptionsLegacyParser<SearchPersonData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchPersonData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchPersonData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchPerson({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchPersonInfiniteQueryKey(options),
    },
  );
};

export const configurationDetailsQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("configurationDetails", options),
];

export const configurationDetailsOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configurationDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: configurationDetailsQueryKey(options),
  });
};

export const tvSeasonDetailsQueryKey = (
  options: OptionsLegacyParser<TvSeasonDetailsData>,
) => [createQueryKey("tvSeasonDetails", options)];

export const tvSeasonDetailsOptions = (
  options: OptionsLegacyParser<TvSeasonDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonDetailsQueryKey(options),
  });
};

export const tvEpisodeDetailsQueryKey = (
  options: OptionsLegacyParser<TvEpisodeDetailsData>,
) => [createQueryKey("tvEpisodeDetails", options)];

export const tvEpisodeDetailsOptions = (
  options: OptionsLegacyParser<TvEpisodeDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeDetailsQueryKey(options),
  });
};

export const discoverTvQueryKey = (
  options?: OptionsLegacyParser<DiscoverTvData>,
) => [createQueryKey("discoverTv", options)];

export const discoverTvOptions = (
  options?: OptionsLegacyParser<DiscoverTvData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await discoverTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: discoverTvQueryKey(options),
  });
};

export const discoverTvInfiniteQueryKey = (
  options?: OptionsLegacyParser<DiscoverTvData>,
): QueryKey<OptionsLegacyParser<DiscoverTvData>> => [
  createQueryKey("discoverTv", options, true),
];

export const discoverTvInfiniteOptions = (
  options?: OptionsLegacyParser<DiscoverTvData>,
) => {
  return infiniteQueryOptions<
    DiscoverTvResponse,
    DiscoverTvError,
    InfiniteData<DiscoverTvResponse>,
    QueryKey<OptionsLegacyParser<DiscoverTvData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<DiscoverTvData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<DiscoverTvData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await discoverTv({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: discoverTvInfiniteQueryKey(options),
    },
  );
};

export const movieImagesQueryKey = (
  options: OptionsLegacyParser<MovieImagesData>,
) => [createQueryKey("movieImages", options)];

export const movieImagesOptions = (
  options: OptionsLegacyParser<MovieImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieImagesQueryKey(options),
  });
};

export const tvSeriesImagesQueryKey = (
  options: OptionsLegacyParser<TvSeriesImagesData>,
) => [createQueryKey("tvSeriesImages", options)];

export const tvSeriesImagesOptions = (
  options: OptionsLegacyParser<TvSeriesImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesImagesQueryKey(options),
  });
};

export const tvSeasonImagesQueryKey = (
  options: OptionsLegacyParser<TvSeasonImagesData>,
) => [createQueryKey("tvSeasonImages", options)];

export const tvSeasonImagesOptions = (
  options: OptionsLegacyParser<TvSeasonImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonImagesQueryKey(options),
  });
};

export const tvEpisodeImagesQueryKey = (
  options: OptionsLegacyParser<TvEpisodeImagesData>,
) => [createQueryKey("tvEpisodeImages", options)];

export const tvEpisodeImagesOptions = (
  options: OptionsLegacyParser<TvEpisodeImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeImagesQueryKey(options),
  });
};

export const trendingAllQueryKey = (
  options: OptionsLegacyParser<TrendingAllData>,
) => [createQueryKey("trendingAll", options)];

export const trendingAllOptions = (
  options: OptionsLegacyParser<TrendingAllData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await trendingAll({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: trendingAllQueryKey(options),
  });
};

export const trendingMoviesQueryKey = (
  options: OptionsLegacyParser<TrendingMoviesData>,
) => [createQueryKey("trendingMovies", options)];

export const trendingMoviesOptions = (
  options: OptionsLegacyParser<TrendingMoviesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await trendingMovies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: trendingMoviesQueryKey(options),
  });
};

export const trendingTvQueryKey = (
  options: OptionsLegacyParser<TrendingTvData>,
) => [createQueryKey("trendingTv", options)];

export const trendingTvOptions = (
  options: OptionsLegacyParser<TrendingTvData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await trendingTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: trendingTvQueryKey(options),
  });
};

export const movieAccountStatesQueryKey = (
  options: OptionsLegacyParser<MovieAccountStatesData>,
) => [createQueryKey("movieAccountStates", options)];

export const movieAccountStatesOptions = (
  options: OptionsLegacyParser<MovieAccountStatesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieAccountStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieAccountStatesQueryKey(options),
  });
};

export const tvSeriesAccountStatesQueryKey = (
  options: OptionsLegacyParser<TvSeriesAccountStatesData>,
) => [createQueryKey("tvSeriesAccountStates", options)];

export const tvSeriesAccountStatesOptions = (
  options: OptionsLegacyParser<TvSeriesAccountStatesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesAccountStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesAccountStatesQueryKey(options),
  });
};

export const tvEpisodeAccountStatesQueryKey = (
  options: OptionsLegacyParser<TvEpisodeAccountStatesData>,
) => [createQueryKey("tvEpisodeAccountStates", options)];

export const tvEpisodeAccountStatesOptions = (
  options: OptionsLegacyParser<TvEpisodeAccountStatesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeAccountStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeAccountStatesQueryKey(options),
  });
};

export const trendingPeopleQueryKey = (
  options: OptionsLegacyParser<TrendingPeopleData>,
) => [createQueryKey("trendingPeople", options)];

export const trendingPeopleOptions = (
  options: OptionsLegacyParser<TrendingPeopleData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await trendingPeople({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: trendingPeopleQueryKey(options),
  });
};

export const movieAlternativeTitlesQueryKey = (
  options: OptionsLegacyParser<MovieAlternativeTitlesData>,
) => [createQueryKey("movieAlternativeTitles", options)];

export const movieAlternativeTitlesOptions = (
  options: OptionsLegacyParser<MovieAlternativeTitlesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieAlternativeTitles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieAlternativeTitlesQueryKey(options),
  });
};

export const movieChangesQueryKey = (
  options: OptionsLegacyParser<MovieChangesData>,
) => [createQueryKey("movieChanges", options)];

export const movieChangesOptions = (
  options: OptionsLegacyParser<MovieChangesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieChanges({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieChangesQueryKey(options),
  });
};

export const movieChangesInfiniteQueryKey = (
  options: OptionsLegacyParser<MovieChangesData>,
): QueryKey<OptionsLegacyParser<MovieChangesData>> => [
  createQueryKey("movieChanges", options, true),
];

export const movieChangesInfiniteOptions = (
  options: OptionsLegacyParser<MovieChangesData>,
) => {
  return infiniteQueryOptions<
    MovieChangesResponse,
    MovieChangesError,
    InfiniteData<MovieChangesResponse>,
    QueryKey<OptionsLegacyParser<MovieChangesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieChangesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieChangesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieChanges({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieChangesInfiniteQueryKey(options),
    },
  );
};

export const movieCreditsQueryKey = (
  options: OptionsLegacyParser<MovieCreditsData>,
) => [createQueryKey("movieCredits", options)];

export const movieCreditsOptions = (
  options: OptionsLegacyParser<MovieCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieCreditsQueryKey(options),
  });
};

export const movieExternalIdsQueryKey = (
  options: OptionsLegacyParser<MovieExternalIdsData>,
) => [createQueryKey("movieExternalIds", options)];

export const movieExternalIdsOptions = (
  options: OptionsLegacyParser<MovieExternalIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieExternalIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieExternalIdsQueryKey(options),
  });
};

export const movieKeywordsQueryKey = (
  options: OptionsLegacyParser<MovieKeywordsData>,
) => [createQueryKey("movieKeywords", options)];

export const movieKeywordsOptions = (
  options: OptionsLegacyParser<MovieKeywordsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieKeywords({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieKeywordsQueryKey(options),
  });
};

export const movieListsQueryKey = (
  options: OptionsLegacyParser<MovieListsData>,
) => [createQueryKey("movieLists", options)];

export const movieListsOptions = (
  options: OptionsLegacyParser<MovieListsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieLists({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieListsQueryKey(options),
  });
};

export const movieListsInfiniteQueryKey = (
  options: OptionsLegacyParser<MovieListsData>,
): QueryKey<OptionsLegacyParser<MovieListsData>> => [
  createQueryKey("movieLists", options, true),
];

export const movieListsInfiniteOptions = (
  options: OptionsLegacyParser<MovieListsData>,
) => {
  return infiniteQueryOptions<
    MovieListsResponse,
    MovieListsError,
    InfiniteData<MovieListsResponse>,
    QueryKey<OptionsLegacyParser<MovieListsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieListsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieListsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieLists({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieListsInfiniteQueryKey(options),
    },
  );
};

export const movieRecommendationsQueryKey = (
  options: OptionsLegacyParser<MovieRecommendationsData>,
) => [createQueryKey("movieRecommendations", options)];

export const movieRecommendationsOptions = (
  options: OptionsLegacyParser<MovieRecommendationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieRecommendations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieRecommendationsQueryKey(options),
  });
};

export const movieRecommendationsInfiniteQueryKey = (
  options: OptionsLegacyParser<MovieRecommendationsData>,
): QueryKey<OptionsLegacyParser<MovieRecommendationsData>> => [
  createQueryKey("movieRecommendations", options, true),
];

export const movieRecommendationsInfiniteOptions = (
  options: OptionsLegacyParser<MovieRecommendationsData>,
) => {
  return infiniteQueryOptions<
    MovieRecommendationsResponse,
    MovieRecommendationsError,
    InfiniteData<MovieRecommendationsResponse>,
    QueryKey<OptionsLegacyParser<MovieRecommendationsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieRecommendationsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieRecommendationsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieRecommendations({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieRecommendationsInfiniteQueryKey(options),
    },
  );
};

export const movieReleaseDatesQueryKey = (
  options: OptionsLegacyParser<MovieReleaseDatesData>,
) => [createQueryKey("movieReleaseDates", options)];

export const movieReleaseDatesOptions = (
  options: OptionsLegacyParser<MovieReleaseDatesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieReleaseDates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieReleaseDatesQueryKey(options),
  });
};

export const movieReviewsQueryKey = (
  options: OptionsLegacyParser<MovieReviewsData>,
) => [createQueryKey("movieReviews", options)];

export const movieReviewsOptions = (
  options: OptionsLegacyParser<MovieReviewsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieReviews({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieReviewsQueryKey(options),
  });
};

export const movieReviewsInfiniteQueryKey = (
  options: OptionsLegacyParser<MovieReviewsData>,
): QueryKey<OptionsLegacyParser<MovieReviewsData>> => [
  createQueryKey("movieReviews", options, true),
];

export const movieReviewsInfiniteOptions = (
  options: OptionsLegacyParser<MovieReviewsData>,
) => {
  return infiniteQueryOptions<
    MovieReviewsResponse,
    MovieReviewsError,
    InfiniteData<MovieReviewsResponse>,
    QueryKey<OptionsLegacyParser<MovieReviewsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieReviewsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieReviewsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieReviews({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieReviewsInfiniteQueryKey(options),
    },
  );
};

export const movieSimilarQueryKey = (
  options: OptionsLegacyParser<MovieSimilarData>,
) => [createQueryKey("movieSimilar", options)];

export const movieSimilarOptions = (
  options: OptionsLegacyParser<MovieSimilarData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieSimilar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieSimilarQueryKey(options),
  });
};

export const movieSimilarInfiniteQueryKey = (
  options: OptionsLegacyParser<MovieSimilarData>,
): QueryKey<OptionsLegacyParser<MovieSimilarData>> => [
  createQueryKey("movieSimilar", options, true),
];

export const movieSimilarInfiniteOptions = (
  options: OptionsLegacyParser<MovieSimilarData>,
) => {
  return infiniteQueryOptions<
    MovieSimilarResponse,
    MovieSimilarError,
    InfiniteData<MovieSimilarResponse>,
    QueryKey<OptionsLegacyParser<MovieSimilarData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieSimilarData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieSimilarData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieSimilar({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieSimilarInfiniteQueryKey(options),
    },
  );
};

export const movieTranslationsQueryKey = (
  options: OptionsLegacyParser<MovieTranslationsData>,
) => [createQueryKey("movieTranslations", options)];

export const movieTranslationsOptions = (
  options: OptionsLegacyParser<MovieTranslationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieTranslations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieTranslationsQueryKey(options),
  });
};

export const movieVideosQueryKey = (
  options: OptionsLegacyParser<MovieVideosData>,
) => [createQueryKey("movieVideos", options)];

export const movieVideosOptions = (
  options: OptionsLegacyParser<MovieVideosData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieVideos({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieVideosQueryKey(options),
  });
};

export const movieWatchProvidersQueryKey = (
  options: OptionsLegacyParser<MovieWatchProvidersData>,
) => [createQueryKey("movieWatchProviders", options)];

export const movieWatchProvidersOptions = (
  options: OptionsLegacyParser<MovieWatchProvidersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieWatchProviders({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieWatchProvidersQueryKey(options),
  });
};

export const movieAddRatingQueryKey = (
  options: OptionsLegacyParser<MovieAddRatingData>,
) => [createQueryKey("movieAddRating", options)];

export const movieAddRatingOptions = (
  options: OptionsLegacyParser<MovieAddRatingData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieAddRating({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieAddRatingQueryKey(options),
  });
};

export const movieAddRatingMutation = (
  options?: Partial<OptionsLegacyParser<MovieAddRatingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    MovieAddRatingResponse,
    MovieAddRatingError,
    OptionsLegacyParser<MovieAddRatingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await movieAddRating({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const movieDeleteRatingMutation = (
  options?: Partial<OptionsLegacyParser<MovieDeleteRatingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    MovieDeleteRatingResponse,
    MovieDeleteRatingError,
    OptionsLegacyParser<MovieDeleteRatingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await movieDeleteRating({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticationCreateGuestSessionQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("authenticationCreateGuestSession", options)];

export const authenticationCreateGuestSessionOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationCreateGuestSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationCreateGuestSessionQueryKey(options),
  });
};

export const authenticationCreateRequestTokenQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("authenticationCreateRequestToken", options)];

export const authenticationCreateRequestTokenOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationCreateRequestToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationCreateRequestTokenQueryKey(options),
  });
};

export const authenticationCreateSessionQueryKey = (
  options?: OptionsLegacyParser<AuthenticationCreateSessionData>,
) => [createQueryKey("authenticationCreateSession", options)];

export const authenticationCreateSessionOptions = (
  options?: OptionsLegacyParser<AuthenticationCreateSessionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationCreateSession({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationCreateSessionQueryKey(options),
  });
};

export const authenticationCreateSessionMutation = (
  options?: Partial<OptionsLegacyParser<AuthenticationCreateSessionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AuthenticationCreateSessionResponse,
    AuthenticationCreateSessionError,
    OptionsLegacyParser<AuthenticationCreateSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationCreateSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticationCreateSessionFromV4TokenQueryKey = (
  options?: OptionsLegacyParser<AuthenticationCreateSessionFromV4TokenData>,
) => [createQueryKey("authenticationCreateSessionFromV4Token", options)];

export const authenticationCreateSessionFromV4TokenOptions = (
  options?: OptionsLegacyParser<AuthenticationCreateSessionFromV4TokenData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationCreateSessionFromV4Token({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationCreateSessionFromV4TokenQueryKey(options),
  });
};

export const authenticationCreateSessionFromV4TokenMutation = (
  options?: Partial<
    OptionsLegacyParser<AuthenticationCreateSessionFromV4TokenData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    AuthenticationCreateSessionFromV4TokenResponse,
    AuthenticationCreateSessionFromV4TokenError,
    OptionsLegacyParser<AuthenticationCreateSessionFromV4TokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationCreateSessionFromV4Token({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticationDeleteSessionMutation = (
  options?: Partial<OptionsLegacyParser<AuthenticationDeleteSessionData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AuthenticationDeleteSessionResponse,
    AuthenticationDeleteSessionError,
    OptionsLegacyParser<AuthenticationDeleteSessionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationDeleteSession({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const findByIdQueryKey = (
  options: OptionsLegacyParser<FindByIdData>,
) => [createQueryKey("findById", options)];

export const findByIdOptions = (options: OptionsLegacyParser<FindByIdData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await findById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: findByIdQueryKey(options),
  });
};

export const personDetailsQueryKey = (
  options: OptionsLegacyParser<PersonDetailsData>,
) => [createQueryKey("personDetails", options)];

export const personDetailsOptions = (
  options: OptionsLegacyParser<PersonDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personDetailsQueryKey(options),
  });
};

export const personChangesQueryKey = (
  options: OptionsLegacyParser<PersonChangesData>,
) => [createQueryKey("personChanges", options)];

export const personChangesOptions = (
  options: OptionsLegacyParser<PersonChangesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personChanges({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personChangesQueryKey(options),
  });
};

export const personChangesInfiniteQueryKey = (
  options: OptionsLegacyParser<PersonChangesData>,
): QueryKey<OptionsLegacyParser<PersonChangesData>> => [
  createQueryKey("personChanges", options, true),
];

export const personChangesInfiniteOptions = (
  options: OptionsLegacyParser<PersonChangesData>,
) => {
  return infiniteQueryOptions<
    PersonChangesResponse,
    PersonChangesError,
    InfiniteData<PersonChangesResponse>,
    QueryKey<OptionsLegacyParser<PersonChangesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<PersonChangesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<PersonChangesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await personChanges({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: personChangesInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesChangesQueryKey = (
  options: OptionsLegacyParser<TvSeriesChangesData>,
) => [createQueryKey("tvSeriesChanges", options)];

export const tvSeriesChangesOptions = (
  options: OptionsLegacyParser<TvSeriesChangesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesChanges({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesChangesQueryKey(options),
  });
};

export const tvSeriesChangesInfiniteQueryKey = (
  options: OptionsLegacyParser<TvSeriesChangesData>,
): QueryKey<OptionsLegacyParser<TvSeriesChangesData>> => [
  createQueryKey("tvSeriesChanges", options, true),
];

export const tvSeriesChangesInfiniteOptions = (
  options: OptionsLegacyParser<TvSeriesChangesData>,
) => {
  return infiniteQueryOptions<
    TvSeriesChangesResponse,
    TvSeriesChangesError,
    InfiniteData<TvSeriesChangesResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesChangesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesChangesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesChangesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesChanges({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesChangesInfiniteQueryKey(options),
    },
  );
};

export const personImagesQueryKey = (
  options: OptionsLegacyParser<PersonImagesData>,
) => [createQueryKey("personImages", options)];

export const personImagesOptions = (
  options: OptionsLegacyParser<PersonImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personImagesQueryKey(options),
  });
};

export const personMovieCreditsQueryKey = (
  options: OptionsLegacyParser<PersonMovieCreditsData>,
) => [createQueryKey("personMovieCredits", options)];

export const personMovieCreditsOptions = (
  options: OptionsLegacyParser<PersonMovieCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personMovieCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personMovieCreditsQueryKey(options),
  });
};

export const personTvCreditsQueryKey = (
  options: OptionsLegacyParser<PersonTvCreditsData>,
) => [createQueryKey("personTvCredits", options)];

export const personTvCreditsOptions = (
  options: OptionsLegacyParser<PersonTvCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personTvCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personTvCreditsQueryKey(options),
  });
};

export const personCombinedCreditsQueryKey = (
  options: OptionsLegacyParser<PersonCombinedCreditsData>,
) => [createQueryKey("personCombinedCredits", options)];

export const personCombinedCreditsOptions = (
  options: OptionsLegacyParser<PersonCombinedCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personCombinedCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personCombinedCreditsQueryKey(options),
  });
};

export const personExternalIdsQueryKey = (
  options: OptionsLegacyParser<PersonExternalIdsData>,
) => [createQueryKey("personExternalIds", options)];

export const personExternalIdsOptions = (
  options: OptionsLegacyParser<PersonExternalIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personExternalIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personExternalIdsQueryKey(options),
  });
};

export const personTaggedImagesQueryKey = (
  options: OptionsLegacyParser<PersonTaggedImagesData>,
) => [createQueryKey("personTaggedImages", options)];

export const personTaggedImagesOptions = (
  options: OptionsLegacyParser<PersonTaggedImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personTaggedImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personTaggedImagesQueryKey(options),
  });
};

export const personTaggedImagesInfiniteQueryKey = (
  options: OptionsLegacyParser<PersonTaggedImagesData>,
): QueryKey<OptionsLegacyParser<PersonTaggedImagesData>> => [
  createQueryKey("personTaggedImages", options, true),
];

export const personTaggedImagesInfiniteOptions = (
  options: OptionsLegacyParser<PersonTaggedImagesData>,
) => {
  return infiniteQueryOptions<
    PersonTaggedImagesResponse,
    PersonTaggedImagesError,
    InfiniteData<PersonTaggedImagesResponse>,
    QueryKey<OptionsLegacyParser<PersonTaggedImagesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<PersonTaggedImagesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<PersonTaggedImagesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await personTaggedImages({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: personTaggedImagesInfiniteQueryKey(options),
    },
  );
};

export const translationsQueryKey = (
  options: OptionsLegacyParser<TranslationsData>,
) => [createQueryKey("translations", options)];

export const translationsOptions = (
  options: OptionsLegacyParser<TranslationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await translations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: translationsQueryKey(options),
  });
};

export const personPopularListQueryKey = (
  options?: OptionsLegacyParser<PersonPopularListData>,
) => [createQueryKey("personPopularList", options)];

export const personPopularListOptions = (
  options?: OptionsLegacyParser<PersonPopularListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personPopularList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personPopularListQueryKey(options),
  });
};

export const personPopularListInfiniteQueryKey = (
  options?: OptionsLegacyParser<PersonPopularListData>,
): QueryKey<OptionsLegacyParser<PersonPopularListData>> => [
  createQueryKey("personPopularList", options, true),
];

export const personPopularListInfiniteOptions = (
  options?: OptionsLegacyParser<PersonPopularListData>,
) => {
  return infiniteQueryOptions<
    PersonPopularListResponse,
    PersonPopularListError,
    InfiniteData<PersonPopularListResponse>,
    QueryKey<OptionsLegacyParser<PersonPopularListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<PersonPopularListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<PersonPopularListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await personPopularList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: personPopularListInfiniteQueryKey(options),
    },
  );
};

export const moviePopularListQueryKey = (
  options?: OptionsLegacyParser<MoviePopularListData>,
) => [createQueryKey("moviePopularList", options)];

export const moviePopularListOptions = (
  options?: OptionsLegacyParser<MoviePopularListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await moviePopularList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: moviePopularListQueryKey(options),
  });
};

export const moviePopularListInfiniteQueryKey = (
  options?: OptionsLegacyParser<MoviePopularListData>,
): QueryKey<OptionsLegacyParser<MoviePopularListData>> => [
  createQueryKey("moviePopularList", options, true),
];

export const moviePopularListInfiniteOptions = (
  options?: OptionsLegacyParser<MoviePopularListData>,
) => {
  return infiniteQueryOptions<
    MoviePopularListResponse,
    MoviePopularListError,
    InfiniteData<MoviePopularListResponse>,
    QueryKey<OptionsLegacyParser<MoviePopularListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MoviePopularListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MoviePopularListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await moviePopularList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: moviePopularListInfiniteQueryKey(options),
    },
  );
};

export const movieTopRatedListQueryKey = (
  options?: OptionsLegacyParser<MovieTopRatedListData>,
) => [createQueryKey("movieTopRatedList", options)];

export const movieTopRatedListOptions = (
  options?: OptionsLegacyParser<MovieTopRatedListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieTopRatedList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieTopRatedListQueryKey(options),
  });
};

export const movieTopRatedListInfiniteQueryKey = (
  options?: OptionsLegacyParser<MovieTopRatedListData>,
): QueryKey<OptionsLegacyParser<MovieTopRatedListData>> => [
  createQueryKey("movieTopRatedList", options, true),
];

export const movieTopRatedListInfiniteOptions = (
  options?: OptionsLegacyParser<MovieTopRatedListData>,
) => {
  return infiniteQueryOptions<
    MovieTopRatedListResponse,
    MovieTopRatedListError,
    InfiniteData<MovieTopRatedListResponse>,
    QueryKey<OptionsLegacyParser<MovieTopRatedListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieTopRatedListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieTopRatedListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieTopRatedList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieTopRatedListInfiniteQueryKey(options),
    },
  );
};

export const movieUpcomingListQueryKey = (
  options?: OptionsLegacyParser<MovieUpcomingListData>,
) => [createQueryKey("movieUpcomingList", options)];

export const movieUpcomingListOptions = (
  options?: OptionsLegacyParser<MovieUpcomingListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieUpcomingList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieUpcomingListQueryKey(options),
  });
};

export const movieUpcomingListInfiniteQueryKey = (
  options?: OptionsLegacyParser<MovieUpcomingListData>,
): QueryKey<OptionsLegacyParser<MovieUpcomingListData>> => [
  createQueryKey("movieUpcomingList", options, true),
];

export const movieUpcomingListInfiniteOptions = (
  options?: OptionsLegacyParser<MovieUpcomingListData>,
) => {
  return infiniteQueryOptions<
    MovieUpcomingListResponse,
    MovieUpcomingListError,
    InfiniteData<MovieUpcomingListResponse>,
    QueryKey<OptionsLegacyParser<MovieUpcomingListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieUpcomingListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieUpcomingListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieUpcomingList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieUpcomingListInfiniteQueryKey(options),
    },
  );
};

export const movieNowPlayingListQueryKey = (
  options?: OptionsLegacyParser<MovieNowPlayingListData>,
) => [createQueryKey("movieNowPlayingList", options)];

export const movieNowPlayingListOptions = (
  options?: OptionsLegacyParser<MovieNowPlayingListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieNowPlayingList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieNowPlayingListQueryKey(options),
  });
};

export const movieNowPlayingListInfiniteQueryKey = (
  options?: OptionsLegacyParser<MovieNowPlayingListData>,
): QueryKey<OptionsLegacyParser<MovieNowPlayingListData>> => [
  createQueryKey("movieNowPlayingList", options, true),
];

export const movieNowPlayingListInfiniteOptions = (
  options?: OptionsLegacyParser<MovieNowPlayingListData>,
) => {
  return infiniteQueryOptions<
    MovieNowPlayingListResponse,
    MovieNowPlayingListError,
    InfiniteData<MovieNowPlayingListResponse>,
    QueryKey<OptionsLegacyParser<MovieNowPlayingListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<MovieNowPlayingListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<MovieNowPlayingListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await movieNowPlayingList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: movieNowPlayingListInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesAiringTodayListQueryKey = (
  options?: OptionsLegacyParser<TvSeriesAiringTodayListData>,
) => [createQueryKey("tvSeriesAiringTodayList", options)];

export const tvSeriesAiringTodayListOptions = (
  options?: OptionsLegacyParser<TvSeriesAiringTodayListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesAiringTodayList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesAiringTodayListQueryKey(options),
  });
};

export const tvSeriesAiringTodayListInfiniteQueryKey = (
  options?: OptionsLegacyParser<TvSeriesAiringTodayListData>,
): QueryKey<OptionsLegacyParser<TvSeriesAiringTodayListData>> => [
  createQueryKey("tvSeriesAiringTodayList", options, true),
];

export const tvSeriesAiringTodayListInfiniteOptions = (
  options?: OptionsLegacyParser<TvSeriesAiringTodayListData>,
) => {
  return infiniteQueryOptions<
    TvSeriesAiringTodayListResponse,
    TvSeriesAiringTodayListError,
    InfiniteData<TvSeriesAiringTodayListResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesAiringTodayListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesAiringTodayListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesAiringTodayListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesAiringTodayList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesAiringTodayListInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesOnTheAirListQueryKey = (
  options?: OptionsLegacyParser<TvSeriesOnTheAirListData>,
) => [createQueryKey("tvSeriesOnTheAirList", options)];

export const tvSeriesOnTheAirListOptions = (
  options?: OptionsLegacyParser<TvSeriesOnTheAirListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesOnTheAirList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesOnTheAirListQueryKey(options),
  });
};

export const tvSeriesOnTheAirListInfiniteQueryKey = (
  options?: OptionsLegacyParser<TvSeriesOnTheAirListData>,
): QueryKey<OptionsLegacyParser<TvSeriesOnTheAirListData>> => [
  createQueryKey("tvSeriesOnTheAirList", options, true),
];

export const tvSeriesOnTheAirListInfiniteOptions = (
  options?: OptionsLegacyParser<TvSeriesOnTheAirListData>,
) => {
  return infiniteQueryOptions<
    TvSeriesOnTheAirListResponse,
    TvSeriesOnTheAirListError,
    InfiniteData<TvSeriesOnTheAirListResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesOnTheAirListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesOnTheAirListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesOnTheAirListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesOnTheAirList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesOnTheAirListInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesPopularListQueryKey = (
  options?: OptionsLegacyParser<TvSeriesPopularListData>,
) => [createQueryKey("tvSeriesPopularList", options)];

export const tvSeriesPopularListOptions = (
  options?: OptionsLegacyParser<TvSeriesPopularListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesPopularList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesPopularListQueryKey(options),
  });
};

export const tvSeriesPopularListInfiniteQueryKey = (
  options?: OptionsLegacyParser<TvSeriesPopularListData>,
): QueryKey<OptionsLegacyParser<TvSeriesPopularListData>> => [
  createQueryKey("tvSeriesPopularList", options, true),
];

export const tvSeriesPopularListInfiniteOptions = (
  options?: OptionsLegacyParser<TvSeriesPopularListData>,
) => {
  return infiniteQueryOptions<
    TvSeriesPopularListResponse,
    TvSeriesPopularListError,
    InfiniteData<TvSeriesPopularListResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesPopularListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesPopularListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesPopularListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesPopularList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesPopularListInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesTopRatedListQueryKey = (
  options?: OptionsLegacyParser<TvSeriesTopRatedListData>,
) => [createQueryKey("tvSeriesTopRatedList", options)];

export const tvSeriesTopRatedListOptions = (
  options?: OptionsLegacyParser<TvSeriesTopRatedListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesTopRatedList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesTopRatedListQueryKey(options),
  });
};

export const tvSeriesTopRatedListInfiniteQueryKey = (
  options?: OptionsLegacyParser<TvSeriesTopRatedListData>,
): QueryKey<OptionsLegacyParser<TvSeriesTopRatedListData>> => [
  createQueryKey("tvSeriesTopRatedList", options, true),
];

export const tvSeriesTopRatedListInfiniteOptions = (
  options?: OptionsLegacyParser<TvSeriesTopRatedListData>,
) => {
  return infiniteQueryOptions<
    TvSeriesTopRatedListResponse,
    TvSeriesTopRatedListError,
    InfiniteData<TvSeriesTopRatedListResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesTopRatedListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesTopRatedListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesTopRatedListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesTopRatedList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesTopRatedListInfiniteQueryKey(options),
    },
  );
};

export const movieLatestIdQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("movieLatestId", options),
];

export const movieLatestIdOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await movieLatestId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: movieLatestIdQueryKey(options),
  });
};

export const tvSeriesLatestIdQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("tvSeriesLatestId", options),
];

export const tvSeriesLatestIdOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesLatestId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesLatestIdQueryKey(options),
  });
};

export const tvSeriesAggregateCreditsQueryKey = (
  options: OptionsLegacyParser<TvSeriesAggregateCreditsData>,
) => [createQueryKey("tvSeriesAggregateCredits", options)];

export const tvSeriesAggregateCreditsOptions = (
  options: OptionsLegacyParser<TvSeriesAggregateCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesAggregateCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesAggregateCreditsQueryKey(options),
  });
};

export const tvSeriesAlternativeTitlesQueryKey = (
  options: OptionsLegacyParser<TvSeriesAlternativeTitlesData>,
) => [createQueryKey("tvSeriesAlternativeTitles", options)];

export const tvSeriesAlternativeTitlesOptions = (
  options: OptionsLegacyParser<TvSeriesAlternativeTitlesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesAlternativeTitles({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesAlternativeTitlesQueryKey(options),
  });
};

export const tvSeriesContentRatingsQueryKey = (
  options: OptionsLegacyParser<TvSeriesContentRatingsData>,
) => [createQueryKey("tvSeriesContentRatings", options)];

export const tvSeriesContentRatingsOptions = (
  options: OptionsLegacyParser<TvSeriesContentRatingsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesContentRatings({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesContentRatingsQueryKey(options),
  });
};

export const tvSeriesCreditsQueryKey = (
  options: OptionsLegacyParser<TvSeriesCreditsData>,
) => [createQueryKey("tvSeriesCredits", options)];

export const tvSeriesCreditsOptions = (
  options: OptionsLegacyParser<TvSeriesCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesCreditsQueryKey(options),
  });
};

export const tvSeriesEpisodeGroupsQueryKey = (
  options: OptionsLegacyParser<TvSeriesEpisodeGroupsData>,
) => [createQueryKey("tvSeriesEpisodeGroups", options)];

export const tvSeriesEpisodeGroupsOptions = (
  options: OptionsLegacyParser<TvSeriesEpisodeGroupsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesEpisodeGroups({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesEpisodeGroupsQueryKey(options),
  });
};

export const tvSeriesExternalIdsQueryKey = (
  options: OptionsLegacyParser<TvSeriesExternalIdsData>,
) => [createQueryKey("tvSeriesExternalIds", options)];

export const tvSeriesExternalIdsOptions = (
  options: OptionsLegacyParser<TvSeriesExternalIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesExternalIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesExternalIdsQueryKey(options),
  });
};

export const tvSeriesKeywordsQueryKey = (
  options: OptionsLegacyParser<TvSeriesKeywordsData>,
) => [createQueryKey("tvSeriesKeywords", options)];

export const tvSeriesKeywordsOptions = (
  options: OptionsLegacyParser<TvSeriesKeywordsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesKeywords({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesKeywordsQueryKey(options),
  });
};

export const tvSeriesRecommendationsQueryKey = (
  options: OptionsLegacyParser<TvSeriesRecommendationsData>,
) => [createQueryKey("tvSeriesRecommendations", options)];

export const tvSeriesRecommendationsOptions = (
  options: OptionsLegacyParser<TvSeriesRecommendationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesRecommendations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesRecommendationsQueryKey(options),
  });
};

export const tvSeriesRecommendationsInfiniteQueryKey = (
  options: OptionsLegacyParser<TvSeriesRecommendationsData>,
): QueryKey<OptionsLegacyParser<TvSeriesRecommendationsData>> => [
  createQueryKey("tvSeriesRecommendations", options, true),
];

export const tvSeriesRecommendationsInfiniteOptions = (
  options: OptionsLegacyParser<TvSeriesRecommendationsData>,
) => {
  return infiniteQueryOptions<
    TvSeriesRecommendationsResponse,
    TvSeriesRecommendationsError,
    InfiniteData<TvSeriesRecommendationsResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesRecommendationsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesRecommendationsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesRecommendationsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesRecommendations({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesRecommendationsInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesReviewsQueryKey = (
  options: OptionsLegacyParser<TvSeriesReviewsData>,
) => [createQueryKey("tvSeriesReviews", options)];

export const tvSeriesReviewsOptions = (
  options: OptionsLegacyParser<TvSeriesReviewsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesReviews({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesReviewsQueryKey(options),
  });
};

export const tvSeriesReviewsInfiniteQueryKey = (
  options: OptionsLegacyParser<TvSeriesReviewsData>,
): QueryKey<OptionsLegacyParser<TvSeriesReviewsData>> => [
  createQueryKey("tvSeriesReviews", options, true),
];

export const tvSeriesReviewsInfiniteOptions = (
  options: OptionsLegacyParser<TvSeriesReviewsData>,
) => {
  return infiniteQueryOptions<
    TvSeriesReviewsResponse,
    TvSeriesReviewsError,
    InfiniteData<TvSeriesReviewsResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesReviewsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesReviewsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesReviewsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesReviews({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesReviewsInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesScreenedTheatricallyQueryKey = (
  options: OptionsLegacyParser<TvSeriesScreenedTheatricallyData>,
) => [createQueryKey("tvSeriesScreenedTheatrically", options)];

export const tvSeriesScreenedTheatricallyOptions = (
  options: OptionsLegacyParser<TvSeriesScreenedTheatricallyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesScreenedTheatrically({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesScreenedTheatricallyQueryKey(options),
  });
};

export const tvSeriesSimilarQueryKey = (
  options: OptionsLegacyParser<TvSeriesSimilarData>,
) => [createQueryKey("tvSeriesSimilar", options)];

export const tvSeriesSimilarOptions = (
  options: OptionsLegacyParser<TvSeriesSimilarData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesSimilar({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesSimilarQueryKey(options),
  });
};

export const tvSeriesSimilarInfiniteQueryKey = (
  options: OptionsLegacyParser<TvSeriesSimilarData>,
): QueryKey<OptionsLegacyParser<TvSeriesSimilarData>> => [
  createQueryKey("tvSeriesSimilar", options, true),
];

export const tvSeriesSimilarInfiniteOptions = (
  options: OptionsLegacyParser<TvSeriesSimilarData>,
) => {
  return infiniteQueryOptions<
    TvSeriesSimilarResponse,
    TvSeriesSimilarError,
    InfiniteData<TvSeriesSimilarResponse>,
    QueryKey<OptionsLegacyParser<TvSeriesSimilarData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeriesSimilarData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeriesSimilarData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeriesSimilar({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeriesSimilarInfiniteQueryKey(options),
    },
  );
};

export const tvSeriesTranslationsQueryKey = (
  options: OptionsLegacyParser<TvSeriesTranslationsData>,
) => [createQueryKey("tvSeriesTranslations", options)];

export const tvSeriesTranslationsOptions = (
  options: OptionsLegacyParser<TvSeriesTranslationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesTranslations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesTranslationsQueryKey(options),
  });
};

export const tvSeriesVideosQueryKey = (
  options: OptionsLegacyParser<TvSeriesVideosData>,
) => [createQueryKey("tvSeriesVideos", options)];

export const tvSeriesVideosOptions = (
  options: OptionsLegacyParser<TvSeriesVideosData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesVideos({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesVideosQueryKey(options),
  });
};

export const tvSeriesWatchProvidersQueryKey = (
  options: OptionsLegacyParser<TvSeriesWatchProvidersData>,
) => [createQueryKey("tvSeriesWatchProviders", options)];

export const tvSeriesWatchProvidersOptions = (
  options: OptionsLegacyParser<TvSeriesWatchProvidersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesWatchProviders({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesWatchProvidersQueryKey(options),
  });
};

export const tvSeriesAddRatingQueryKey = (
  options: OptionsLegacyParser<TvSeriesAddRatingData>,
) => [createQueryKey("tvSeriesAddRating", options)];

export const tvSeriesAddRatingOptions = (
  options: OptionsLegacyParser<TvSeriesAddRatingData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeriesAddRating({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeriesAddRatingQueryKey(options),
  });
};

export const tvSeriesAddRatingMutation = (
  options?: Partial<OptionsLegacyParser<TvSeriesAddRatingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TvSeriesAddRatingResponse,
    TvSeriesAddRatingError,
    OptionsLegacyParser<TvSeriesAddRatingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tvSeriesAddRating({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tvSeriesDeleteRatingMutation = (
  options?: Partial<OptionsLegacyParser<TvSeriesDeleteRatingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TvSeriesDeleteRatingResponse,
    TvSeriesDeleteRatingError,
    OptionsLegacyParser<TvSeriesDeleteRatingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tvSeriesDeleteRating({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tvSeasonAccountStatesQueryKey = (
  options: OptionsLegacyParser<TvSeasonAccountStatesData>,
) => [createQueryKey("tvSeasonAccountStates", options)];

export const tvSeasonAccountStatesOptions = (
  options: OptionsLegacyParser<TvSeasonAccountStatesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonAccountStates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonAccountStatesQueryKey(options),
  });
};

export const tvSeasonAggregateCreditsQueryKey = (
  options: OptionsLegacyParser<TvSeasonAggregateCreditsData>,
) => [createQueryKey("tvSeasonAggregateCredits", options)];

export const tvSeasonAggregateCreditsOptions = (
  options: OptionsLegacyParser<TvSeasonAggregateCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonAggregateCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonAggregateCreditsQueryKey(options),
  });
};

export const tvSeasonChangesByIdQueryKey = (
  options: OptionsLegacyParser<TvSeasonChangesByIdData>,
) => [createQueryKey("tvSeasonChangesById", options)];

export const tvSeasonChangesByIdOptions = (
  options: OptionsLegacyParser<TvSeasonChangesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonChangesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonChangesByIdQueryKey(options),
  });
};

export const tvSeasonChangesByIdInfiniteQueryKey = (
  options: OptionsLegacyParser<TvSeasonChangesByIdData>,
): QueryKey<OptionsLegacyParser<TvSeasonChangesByIdData>> => [
  createQueryKey("tvSeasonChangesById", options, true),
];

export const tvSeasonChangesByIdInfiniteOptions = (
  options: OptionsLegacyParser<TvSeasonChangesByIdData>,
) => {
  return infiniteQueryOptions<
    TvSeasonChangesByIdResponse,
    TvSeasonChangesByIdError,
    InfiniteData<TvSeasonChangesByIdResponse>,
    QueryKey<OptionsLegacyParser<TvSeasonChangesByIdData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<TvSeasonChangesByIdData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<TvSeasonChangesByIdData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await tvSeasonChangesById({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: tvSeasonChangesByIdInfiniteQueryKey(options),
    },
  );
};

export const tvSeasonCreditsQueryKey = (
  options: OptionsLegacyParser<TvSeasonCreditsData>,
) => [createQueryKey("tvSeasonCredits", options)];

export const tvSeasonCreditsOptions = (
  options: OptionsLegacyParser<TvSeasonCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonCreditsQueryKey(options),
  });
};

export const tvSeasonExternalIdsQueryKey = (
  options: OptionsLegacyParser<TvSeasonExternalIdsData>,
) => [createQueryKey("tvSeasonExternalIds", options)];

export const tvSeasonExternalIdsOptions = (
  options: OptionsLegacyParser<TvSeasonExternalIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonExternalIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonExternalIdsQueryKey(options),
  });
};

export const tvSeasonTranslationsQueryKey = (
  options: OptionsLegacyParser<TvSeasonTranslationsData>,
) => [createQueryKey("tvSeasonTranslations", options)];

export const tvSeasonTranslationsOptions = (
  options: OptionsLegacyParser<TvSeasonTranslationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonTranslations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonTranslationsQueryKey(options),
  });
};

export const tvSeasonVideosQueryKey = (
  options: OptionsLegacyParser<TvSeasonVideosData>,
) => [createQueryKey("tvSeasonVideos", options)];

export const tvSeasonVideosOptions = (
  options: OptionsLegacyParser<TvSeasonVideosData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonVideos({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonVideosQueryKey(options),
  });
};

export const tvEpisodeCreditsQueryKey = (
  options: OptionsLegacyParser<TvEpisodeCreditsData>,
) => [createQueryKey("tvEpisodeCredits", options)];

export const tvEpisodeCreditsOptions = (
  options: OptionsLegacyParser<TvEpisodeCreditsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeCredits({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeCreditsQueryKey(options),
  });
};

export const tvEpisodeExternalIdsQueryKey = (
  options: OptionsLegacyParser<TvEpisodeExternalIdsData>,
) => [createQueryKey("tvEpisodeExternalIds", options)];

export const tvEpisodeExternalIdsOptions = (
  options: OptionsLegacyParser<TvEpisodeExternalIdsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeExternalIds({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeExternalIdsQueryKey(options),
  });
};

export const tvEpisodeTranslationsQueryKey = (
  options: OptionsLegacyParser<TvEpisodeTranslationsData>,
) => [createQueryKey("tvEpisodeTranslations", options)];

export const tvEpisodeTranslationsOptions = (
  options: OptionsLegacyParser<TvEpisodeTranslationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeTranslations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeTranslationsQueryKey(options),
  });
};

export const tvEpisodeVideosQueryKey = (
  options: OptionsLegacyParser<TvEpisodeVideosData>,
) => [createQueryKey("tvEpisodeVideos", options)];

export const tvEpisodeVideosOptions = (
  options: OptionsLegacyParser<TvEpisodeVideosData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeVideos({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeVideosQueryKey(options),
  });
};

export const tvEpisodeAddRatingQueryKey = (
  options: OptionsLegacyParser<TvEpisodeAddRatingData>,
) => [createQueryKey("tvEpisodeAddRating", options)];

export const tvEpisodeAddRatingOptions = (
  options: OptionsLegacyParser<TvEpisodeAddRatingData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeAddRating({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeAddRatingQueryKey(options),
  });
};

export const tvEpisodeAddRatingMutation = (
  options?: Partial<OptionsLegacyParser<TvEpisodeAddRatingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TvEpisodeAddRatingResponse,
    TvEpisodeAddRatingError,
    OptionsLegacyParser<TvEpisodeAddRatingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tvEpisodeAddRating({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const tvEpisodeDeleteRatingMutation = (
  options?: Partial<OptionsLegacyParser<TvEpisodeDeleteRatingData>>,
) => {
  const mutationOptions: UseMutationOptions<
    TvEpisodeDeleteRatingResponse,
    TvEpisodeDeleteRatingError,
    OptionsLegacyParser<TvEpisodeDeleteRatingData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await tvEpisodeDeleteRating({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const accountDetailsQueryKey = (
  options: OptionsLegacyParser<AccountDetailsData>,
) => [createQueryKey("accountDetails", options)];

export const accountDetailsOptions = (
  options: OptionsLegacyParser<AccountDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountDetailsQueryKey(options),
  });
};

export const accountListsQueryKey = (
  options: OptionsLegacyParser<AccountListsData>,
) => [createQueryKey("accountLists", options)];

export const accountListsOptions = (
  options: OptionsLegacyParser<AccountListsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountLists({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountListsQueryKey(options),
  });
};

export const accountListsInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountListsData>,
): QueryKey<OptionsLegacyParser<AccountListsData>> => [
  createQueryKey("accountLists", options, true),
];

export const accountListsInfiniteOptions = (
  options: OptionsLegacyParser<AccountListsData>,
) => {
  return infiniteQueryOptions<
    AccountListsResponse,
    AccountListsError,
    InfiniteData<AccountListsResponse>,
    QueryKey<OptionsLegacyParser<AccountListsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountListsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountListsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountLists({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountListsInfiniteQueryKey(options),
    },
  );
};

export const accountGetFavoritesQueryKey = (
  options: OptionsLegacyParser<AccountGetFavoritesData>,
) => [createQueryKey("accountGetFavorites", options)];

export const accountGetFavoritesOptions = (
  options: OptionsLegacyParser<AccountGetFavoritesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountGetFavorites({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountGetFavoritesQueryKey(options),
  });
};

export const accountGetFavoritesInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountGetFavoritesData>,
): QueryKey<OptionsLegacyParser<AccountGetFavoritesData>> => [
  createQueryKey("accountGetFavorites", options, true),
];

export const accountGetFavoritesInfiniteOptions = (
  options: OptionsLegacyParser<AccountGetFavoritesData>,
) => {
  return infiniteQueryOptions<
    AccountGetFavoritesResponse,
    AccountGetFavoritesError,
    InfiniteData<AccountGetFavoritesResponse>,
    QueryKey<OptionsLegacyParser<AccountGetFavoritesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountGetFavoritesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountGetFavoritesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountGetFavorites({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountGetFavoritesInfiniteQueryKey(options),
    },
  );
};

export const accountFavoriteTvQueryKey = (
  options: OptionsLegacyParser<AccountFavoriteTvData>,
) => [createQueryKey("accountFavoriteTv", options)];

export const accountFavoriteTvOptions = (
  options: OptionsLegacyParser<AccountFavoriteTvData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountFavoriteTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountFavoriteTvQueryKey(options),
  });
};

export const accountFavoriteTvInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountFavoriteTvData>,
): QueryKey<OptionsLegacyParser<AccountFavoriteTvData>> => [
  createQueryKey("accountFavoriteTv", options, true),
];

export const accountFavoriteTvInfiniteOptions = (
  options: OptionsLegacyParser<AccountFavoriteTvData>,
) => {
  return infiniteQueryOptions<
    AccountFavoriteTvResponse,
    AccountFavoriteTvError,
    InfiniteData<AccountFavoriteTvResponse>,
    QueryKey<OptionsLegacyParser<AccountFavoriteTvData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountFavoriteTvData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountFavoriteTvData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountFavoriteTv({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountFavoriteTvInfiniteQueryKey(options),
    },
  );
};

export const accountRatedMoviesQueryKey = (
  options: OptionsLegacyParser<AccountRatedMoviesData>,
) => [createQueryKey("accountRatedMovies", options)];

export const accountRatedMoviesOptions = (
  options: OptionsLegacyParser<AccountRatedMoviesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountRatedMovies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountRatedMoviesQueryKey(options),
  });
};

export const accountRatedMoviesInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountRatedMoviesData>,
): QueryKey<OptionsLegacyParser<AccountRatedMoviesData>> => [
  createQueryKey("accountRatedMovies", options, true),
];

export const accountRatedMoviesInfiniteOptions = (
  options: OptionsLegacyParser<AccountRatedMoviesData>,
) => {
  return infiniteQueryOptions<
    AccountRatedMoviesResponse,
    AccountRatedMoviesError,
    InfiniteData<AccountRatedMoviesResponse>,
    QueryKey<OptionsLegacyParser<AccountRatedMoviesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountRatedMoviesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountRatedMoviesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountRatedMovies({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountRatedMoviesInfiniteQueryKey(options),
    },
  );
};

export const accountRatedTvQueryKey = (
  options: OptionsLegacyParser<AccountRatedTvData>,
) => [createQueryKey("accountRatedTv", options)];

export const accountRatedTvOptions = (
  options: OptionsLegacyParser<AccountRatedTvData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountRatedTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountRatedTvQueryKey(options),
  });
};

export const accountRatedTvInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountRatedTvData>,
): QueryKey<OptionsLegacyParser<AccountRatedTvData>> => [
  createQueryKey("accountRatedTv", options, true),
];

export const accountRatedTvInfiniteOptions = (
  options: OptionsLegacyParser<AccountRatedTvData>,
) => {
  return infiniteQueryOptions<
    AccountRatedTvResponse,
    AccountRatedTvError,
    InfiniteData<AccountRatedTvResponse>,
    QueryKey<OptionsLegacyParser<AccountRatedTvData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountRatedTvData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountRatedTvData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountRatedTv({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountRatedTvInfiniteQueryKey(options),
    },
  );
};

export const accountRatedTvEpisodesQueryKey = (
  options: OptionsLegacyParser<AccountRatedTvEpisodesData>,
) => [createQueryKey("accountRatedTvEpisodes", options)];

export const accountRatedTvEpisodesOptions = (
  options: OptionsLegacyParser<AccountRatedTvEpisodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountRatedTvEpisodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountRatedTvEpisodesQueryKey(options),
  });
};

export const accountRatedTvEpisodesInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountRatedTvEpisodesData>,
): QueryKey<OptionsLegacyParser<AccountRatedTvEpisodesData>> => [
  createQueryKey("accountRatedTvEpisodes", options, true),
];

export const accountRatedTvEpisodesInfiniteOptions = (
  options: OptionsLegacyParser<AccountRatedTvEpisodesData>,
) => {
  return infiniteQueryOptions<
    AccountRatedTvEpisodesResponse,
    AccountRatedTvEpisodesError,
    InfiniteData<AccountRatedTvEpisodesResponse>,
    QueryKey<OptionsLegacyParser<AccountRatedTvEpisodesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountRatedTvEpisodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountRatedTvEpisodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountRatedTvEpisodes({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountRatedTvEpisodesInfiniteQueryKey(options),
    },
  );
};

export const accountWatchlistMoviesQueryKey = (
  options: OptionsLegacyParser<AccountWatchlistMoviesData>,
) => [createQueryKey("accountWatchlistMovies", options)];

export const accountWatchlistMoviesOptions = (
  options: OptionsLegacyParser<AccountWatchlistMoviesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountWatchlistMovies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountWatchlistMoviesQueryKey(options),
  });
};

export const accountWatchlistMoviesInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountWatchlistMoviesData>,
): QueryKey<OptionsLegacyParser<AccountWatchlistMoviesData>> => [
  createQueryKey("accountWatchlistMovies", options, true),
];

export const accountWatchlistMoviesInfiniteOptions = (
  options: OptionsLegacyParser<AccountWatchlistMoviesData>,
) => {
  return infiniteQueryOptions<
    AccountWatchlistMoviesResponse,
    AccountWatchlistMoviesError,
    InfiniteData<AccountWatchlistMoviesResponse>,
    QueryKey<OptionsLegacyParser<AccountWatchlistMoviesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountWatchlistMoviesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountWatchlistMoviesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountWatchlistMovies({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountWatchlistMoviesInfiniteQueryKey(options),
    },
  );
};

export const accountWatchlistTvQueryKey = (
  options: OptionsLegacyParser<AccountWatchlistTvData>,
) => [createQueryKey("accountWatchlistTv", options)];

export const accountWatchlistTvOptions = (
  options: OptionsLegacyParser<AccountWatchlistTvData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountWatchlistTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountWatchlistTvQueryKey(options),
  });
};

export const accountWatchlistTvInfiniteQueryKey = (
  options: OptionsLegacyParser<AccountWatchlistTvData>,
): QueryKey<OptionsLegacyParser<AccountWatchlistTvData>> => [
  createQueryKey("accountWatchlistTv", options, true),
];

export const accountWatchlistTvInfiniteOptions = (
  options: OptionsLegacyParser<AccountWatchlistTvData>,
) => {
  return infiniteQueryOptions<
    AccountWatchlistTvResponse,
    AccountWatchlistTvError,
    InfiniteData<AccountWatchlistTvResponse>,
    QueryKey<OptionsLegacyParser<AccountWatchlistTvData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<AccountWatchlistTvData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<AccountWatchlistTvData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await accountWatchlistTv({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: accountWatchlistTvInfiniteQueryKey(options),
    },
  );
};

export const accountAddFavoriteQueryKey = (
  options: OptionsLegacyParser<AccountAddFavoriteData>,
) => [createQueryKey("accountAddFavorite", options)];

export const accountAddFavoriteOptions = (
  options: OptionsLegacyParser<AccountAddFavoriteData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountAddFavorite({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountAddFavoriteQueryKey(options),
  });
};

export const accountAddFavoriteMutation = (
  options?: Partial<OptionsLegacyParser<AccountAddFavoriteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AccountAddFavoriteResponse,
    AccountAddFavoriteError,
    OptionsLegacyParser<AccountAddFavoriteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await accountAddFavorite({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const accountAddToWatchlistQueryKey = (
  options: OptionsLegacyParser<AccountAddToWatchlistData>,
) => [createQueryKey("accountAddToWatchlist", options)];

export const accountAddToWatchlistOptions = (
  options: OptionsLegacyParser<AccountAddToWatchlistData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await accountAddToWatchlist({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: accountAddToWatchlistQueryKey(options),
  });
};

export const accountAddToWatchlistMutation = (
  options?: Partial<OptionsLegacyParser<AccountAddToWatchlistData>>,
) => {
  const mutationOptions: UseMutationOptions<
    AccountAddToWatchlistResponse,
    AccountAddToWatchlistError,
    OptionsLegacyParser<AccountAddToWatchlistData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await accountAddToWatchlist({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const certificationMovieListQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("certificationMovieList", options)];

export const certificationMovieListOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await certificationMovieList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: certificationMovieListQueryKey(options),
  });
};

export const certificationsTvListQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("certificationsTvList", options),
];

export const certificationsTvListOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await certificationsTvList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: certificationsTvListQueryKey(options),
  });
};

export const changesMovieListQueryKey = (
  options?: OptionsLegacyParser<ChangesMovieListData>,
) => [createQueryKey("changesMovieList", options)];

export const changesMovieListOptions = (
  options?: OptionsLegacyParser<ChangesMovieListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await changesMovieList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: changesMovieListQueryKey(options),
  });
};

export const changesMovieListInfiniteQueryKey = (
  options?: OptionsLegacyParser<ChangesMovieListData>,
): QueryKey<OptionsLegacyParser<ChangesMovieListData>> => [
  createQueryKey("changesMovieList", options, true),
];

export const changesMovieListInfiniteOptions = (
  options?: OptionsLegacyParser<ChangesMovieListData>,
) => {
  return infiniteQueryOptions<
    ChangesMovieListResponse,
    ChangesMovieListError,
    InfiniteData<ChangesMovieListResponse>,
    QueryKey<OptionsLegacyParser<ChangesMovieListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<ChangesMovieListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<ChangesMovieListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await changesMovieList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: changesMovieListInfiniteQueryKey(options),
    },
  );
};

export const changesTvListQueryKey = (
  options?: OptionsLegacyParser<ChangesTvListData>,
) => [createQueryKey("changesTvList", options)];

export const changesTvListOptions = (
  options?: OptionsLegacyParser<ChangesTvListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await changesTvList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: changesTvListQueryKey(options),
  });
};

export const changesTvListInfiniteQueryKey = (
  options?: OptionsLegacyParser<ChangesTvListData>,
): QueryKey<OptionsLegacyParser<ChangesTvListData>> => [
  createQueryKey("changesTvList", options, true),
];

export const changesTvListInfiniteOptions = (
  options?: OptionsLegacyParser<ChangesTvListData>,
) => {
  return infiniteQueryOptions<
    ChangesTvListResponse,
    ChangesTvListError,
    InfiniteData<ChangesTvListResponse>,
    QueryKey<OptionsLegacyParser<ChangesTvListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<ChangesTvListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<ChangesTvListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await changesTvList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: changesTvListInfiniteQueryKey(options),
    },
  );
};

export const changesPeopleListQueryKey = (
  options?: OptionsLegacyParser<ChangesPeopleListData>,
) => [createQueryKey("changesPeopleList", options)];

export const changesPeopleListOptions = (
  options?: OptionsLegacyParser<ChangesPeopleListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await changesPeopleList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: changesPeopleListQueryKey(options),
  });
};

export const changesPeopleListInfiniteQueryKey = (
  options?: OptionsLegacyParser<ChangesPeopleListData>,
): QueryKey<OptionsLegacyParser<ChangesPeopleListData>> => [
  createQueryKey("changesPeopleList", options, true),
];

export const changesPeopleListInfiniteOptions = (
  options?: OptionsLegacyParser<ChangesPeopleListData>,
) => {
  return infiniteQueryOptions<
    ChangesPeopleListResponse,
    ChangesPeopleListError,
    InfiniteData<ChangesPeopleListResponse>,
    QueryKey<OptionsLegacyParser<ChangesPeopleListData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<ChangesPeopleListData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<ChangesPeopleListData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await changesPeopleList({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: changesPeopleListInfiniteQueryKey(options),
    },
  );
};

export const collectionDetailsQueryKey = (
  options: OptionsLegacyParser<CollectionDetailsData>,
) => [createQueryKey("collectionDetails", options)];

export const collectionDetailsOptions = (
  options: OptionsLegacyParser<CollectionDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await collectionDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: collectionDetailsQueryKey(options),
  });
};

export const collectionImagesQueryKey = (
  options: OptionsLegacyParser<CollectionImagesData>,
) => [createQueryKey("collectionImages", options)];

export const collectionImagesOptions = (
  options: OptionsLegacyParser<CollectionImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await collectionImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: collectionImagesQueryKey(options),
  });
};

export const collectionTranslationsQueryKey = (
  options: OptionsLegacyParser<CollectionTranslationsData>,
) => [createQueryKey("collectionTranslations", options)];

export const collectionTranslationsOptions = (
  options: OptionsLegacyParser<CollectionTranslationsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await collectionTranslations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: collectionTranslationsQueryKey(options),
  });
};

export const companyDetailsQueryKey = (
  options: OptionsLegacyParser<CompanyDetailsData>,
) => [createQueryKey("companyDetails", options)];

export const companyDetailsOptions = (
  options: OptionsLegacyParser<CompanyDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await companyDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: companyDetailsQueryKey(options),
  });
};

export const companyAlternativeNamesQueryKey = (
  options: OptionsLegacyParser<CompanyAlternativeNamesData>,
) => [createQueryKey("companyAlternativeNames", options)];

export const companyAlternativeNamesOptions = (
  options: OptionsLegacyParser<CompanyAlternativeNamesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await companyAlternativeNames({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: companyAlternativeNamesQueryKey(options),
  });
};

export const companyImagesQueryKey = (
  options: OptionsLegacyParser<CompanyImagesData>,
) => [createQueryKey("companyImages", options)];

export const companyImagesOptions = (
  options: OptionsLegacyParser<CompanyImagesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await companyImages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: companyImagesQueryKey(options),
  });
};

export const creditDetailsQueryKey = (
  options: OptionsLegacyParser<CreditDetailsData>,
) => [createQueryKey("creditDetails", options)];

export const creditDetailsOptions = (
  options: OptionsLegacyParser<CreditDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await creditDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: creditDetailsQueryKey(options),
  });
};

export const genreMovieListQueryKey = (
  options?: OptionsLegacyParser<GenreMovieListData>,
) => [createQueryKey("genreMovieList", options)];

export const genreMovieListOptions = (
  options?: OptionsLegacyParser<GenreMovieListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await genreMovieList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: genreMovieListQueryKey(options),
  });
};

export const genreTvListQueryKey = (
  options?: OptionsLegacyParser<GenreTvListData>,
) => [createQueryKey("genreTvList", options)];

export const genreTvListOptions = (
  options?: OptionsLegacyParser<GenreTvListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await genreTvList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: genreTvListQueryKey(options),
  });
};

export const guestSessionRatedMoviesQueryKey = (
  options: OptionsLegacyParser<GuestSessionRatedMoviesData>,
) => [createQueryKey("guestSessionRatedMovies", options)];

export const guestSessionRatedMoviesOptions = (
  options: OptionsLegacyParser<GuestSessionRatedMoviesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await guestSessionRatedMovies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: guestSessionRatedMoviesQueryKey(options),
  });
};

export const guestSessionRatedMoviesInfiniteQueryKey = (
  options: OptionsLegacyParser<GuestSessionRatedMoviesData>,
): QueryKey<OptionsLegacyParser<GuestSessionRatedMoviesData>> => [
  createQueryKey("guestSessionRatedMovies", options, true),
];

export const guestSessionRatedMoviesInfiniteOptions = (
  options: OptionsLegacyParser<GuestSessionRatedMoviesData>,
) => {
  return infiniteQueryOptions<
    GuestSessionRatedMoviesResponse,
    GuestSessionRatedMoviesError,
    InfiniteData<GuestSessionRatedMoviesResponse>,
    QueryKey<OptionsLegacyParser<GuestSessionRatedMoviesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GuestSessionRatedMoviesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GuestSessionRatedMoviesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await guestSessionRatedMovies({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: guestSessionRatedMoviesInfiniteQueryKey(options),
    },
  );
};

export const guestSessionRatedTvQueryKey = (
  options: OptionsLegacyParser<GuestSessionRatedTvData>,
) => [createQueryKey("guestSessionRatedTv", options)];

export const guestSessionRatedTvOptions = (
  options: OptionsLegacyParser<GuestSessionRatedTvData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await guestSessionRatedTv({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: guestSessionRatedTvQueryKey(options),
  });
};

export const guestSessionRatedTvInfiniteQueryKey = (
  options: OptionsLegacyParser<GuestSessionRatedTvData>,
): QueryKey<OptionsLegacyParser<GuestSessionRatedTvData>> => [
  createQueryKey("guestSessionRatedTv", options, true),
];

export const guestSessionRatedTvInfiniteOptions = (
  options: OptionsLegacyParser<GuestSessionRatedTvData>,
) => {
  return infiniteQueryOptions<
    GuestSessionRatedTvResponse,
    GuestSessionRatedTvError,
    InfiniteData<GuestSessionRatedTvResponse>,
    QueryKey<OptionsLegacyParser<GuestSessionRatedTvData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GuestSessionRatedTvData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GuestSessionRatedTvData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await guestSessionRatedTv({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: guestSessionRatedTvInfiniteQueryKey(options),
    },
  );
};

export const guestSessionRatedTvEpisodesQueryKey = (
  options: OptionsLegacyParser<GuestSessionRatedTvEpisodesData>,
) => [createQueryKey("guestSessionRatedTvEpisodes", options)];

export const guestSessionRatedTvEpisodesOptions = (
  options: OptionsLegacyParser<GuestSessionRatedTvEpisodesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await guestSessionRatedTvEpisodes({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: guestSessionRatedTvEpisodesQueryKey(options),
  });
};

export const guestSessionRatedTvEpisodesInfiniteQueryKey = (
  options: OptionsLegacyParser<GuestSessionRatedTvEpisodesData>,
): QueryKey<OptionsLegacyParser<GuestSessionRatedTvEpisodesData>> => [
  createQueryKey("guestSessionRatedTvEpisodes", options, true),
];

export const guestSessionRatedTvEpisodesInfiniteOptions = (
  options: OptionsLegacyParser<GuestSessionRatedTvEpisodesData>,
) => {
  return infiniteQueryOptions<
    GuestSessionRatedTvEpisodesResponse,
    GuestSessionRatedTvEpisodesError,
    InfiniteData<GuestSessionRatedTvEpisodesResponse>,
    QueryKey<OptionsLegacyParser<GuestSessionRatedTvEpisodesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<GuestSessionRatedTvEpisodesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<GuestSessionRatedTvEpisodesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await guestSessionRatedTvEpisodes({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: guestSessionRatedTvEpisodesInfiniteQueryKey(options),
    },
  );
};

export const watchProvidersAvailableRegionsQueryKey = (
  options?: OptionsLegacyParser<WatchProvidersAvailableRegionsData>,
) => [createQueryKey("watchProvidersAvailableRegions", options)];

export const watchProvidersAvailableRegionsOptions = (
  options?: OptionsLegacyParser<WatchProvidersAvailableRegionsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await watchProvidersAvailableRegions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: watchProvidersAvailableRegionsQueryKey(options),
  });
};

export const watchProvidersMovieListQueryKey = (
  options?: OptionsLegacyParser<WatchProvidersMovieListData>,
) => [createQueryKey("watchProvidersMovieList", options)];

export const watchProvidersMovieListOptions = (
  options?: OptionsLegacyParser<WatchProvidersMovieListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await watchProvidersMovieList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: watchProvidersMovieListQueryKey(options),
  });
};

export const watchProviderTvListQueryKey = (
  options?: OptionsLegacyParser<WatchProviderTvListData>,
) => [createQueryKey("watchProviderTvList", options)];

export const watchProviderTvListOptions = (
  options?: OptionsLegacyParser<WatchProviderTvListData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await watchProviderTvList({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: watchProviderTvListQueryKey(options),
  });
};

export const keywordDetailsQueryKey = (
  options: OptionsLegacyParser<KeywordDetailsData>,
) => [createQueryKey("keywordDetails", options)];

export const keywordDetailsOptions = (
  options: OptionsLegacyParser<KeywordDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await keywordDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: keywordDetailsQueryKey(options),
  });
};

export const keywordMoviesQueryKey = (
  options: OptionsLegacyParser<KeywordMoviesData>,
) => [createQueryKey("keywordMovies", options)];

export const keywordMoviesOptions = (
  options: OptionsLegacyParser<KeywordMoviesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await keywordMovies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: keywordMoviesQueryKey(options),
  });
};

export const keywordMoviesInfiniteQueryKey = (
  options: OptionsLegacyParser<KeywordMoviesData>,
): QueryKey<OptionsLegacyParser<KeywordMoviesData>> => [
  createQueryKey("keywordMovies", options, true),
];

export const keywordMoviesInfiniteOptions = (
  options: OptionsLegacyParser<KeywordMoviesData>,
) => {
  return infiniteQueryOptions<
    KeywordMoviesResponse,
    KeywordMoviesError,
    InfiniteData<KeywordMoviesResponse>,
    QueryKey<OptionsLegacyParser<KeywordMoviesData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<KeywordMoviesData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<KeywordMoviesData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await keywordMovies({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: keywordMoviesInfiniteQueryKey(options),
    },
  );
};

export const listDetailsQueryKey = (
  options: OptionsLegacyParser<ListDetailsData>,
) => [createQueryKey("listDetails", options)];

export const listDetailsOptions = (
  options: OptionsLegacyParser<ListDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listDetailsQueryKey(options),
  });
};

export const listDetailsInfiniteQueryKey = (
  options: OptionsLegacyParser<ListDetailsData>,
): QueryKey<OptionsLegacyParser<ListDetailsData>> => [
  createQueryKey("listDetails", options, true),
];

export const listDetailsInfiniteOptions = (
  options: OptionsLegacyParser<ListDetailsData>,
) => {
  return infiniteQueryOptions<
    ListDetailsResponse,
    ListDetailsError,
    InfiniteData<ListDetailsResponse>,
    QueryKey<OptionsLegacyParser<ListDetailsData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<ListDetailsData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<ListDetailsData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await listDetails({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: listDetailsInfiniteQueryKey(options),
    },
  );
};

export const listDeleteMutation = (
  options?: Partial<OptionsLegacyParser<ListDeleteData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ListDeleteResponse,
    ListDeleteError,
    OptionsLegacyParser<ListDeleteData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await listDelete({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listCheckItemStatusQueryKey = (
  options: OptionsLegacyParser<ListCheckItemStatusData>,
) => [createQueryKey("listCheckItemStatus", options)];

export const listCheckItemStatusOptions = (
  options: OptionsLegacyParser<ListCheckItemStatusData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listCheckItemStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listCheckItemStatusQueryKey(options),
  });
};

export const listCreateQueryKey = (
  options: OptionsLegacyParser<ListCreateData>,
) => [createQueryKey("listCreate", options)];

export const listCreateOptions = (
  options: OptionsLegacyParser<ListCreateData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listCreate({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listCreateQueryKey(options),
  });
};

export const listCreateMutation = (
  options?: Partial<OptionsLegacyParser<ListCreateData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ListCreateResponse,
    ListCreateError,
    OptionsLegacyParser<ListCreateData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await listCreate({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listAddMovieQueryKey = (
  options: OptionsLegacyParser<ListAddMovieData>,
) => [createQueryKey("listAddMovie", options)];

export const listAddMovieOptions = (
  options: OptionsLegacyParser<ListAddMovieData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listAddMovie({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listAddMovieQueryKey(options),
  });
};

export const listAddMovieMutation = (
  options?: Partial<OptionsLegacyParser<ListAddMovieData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ListAddMovieResponse,
    ListAddMovieError,
    OptionsLegacyParser<ListAddMovieData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await listAddMovie({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listRemoveMovieQueryKey = (
  options: OptionsLegacyParser<ListRemoveMovieData>,
) => [createQueryKey("listRemoveMovie", options)];

export const listRemoveMovieOptions = (
  options: OptionsLegacyParser<ListRemoveMovieData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listRemoveMovie({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listRemoveMovieQueryKey(options),
  });
};

export const listRemoveMovieMutation = (
  options?: Partial<OptionsLegacyParser<ListRemoveMovieData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ListRemoveMovieResponse,
    ListRemoveMovieError,
    OptionsLegacyParser<ListRemoveMovieData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await listRemoveMovie({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listClearQueryKey = (
  options: OptionsLegacyParser<ListClearData>,
) => [createQueryKey("listClear", options)];

export const listClearOptions = (
  options: OptionsLegacyParser<ListClearData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listClear({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listClearQueryKey(options),
  });
};

export const listClearMutation = (
  options?: Partial<OptionsLegacyParser<ListClearData>>,
) => {
  const mutationOptions: UseMutationOptions<
    ListClearResponse,
    ListClearError,
    OptionsLegacyParser<ListClearData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await listClear({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const networkDetailsQueryKey = (
  options: OptionsLegacyParser<NetworkDetailsData>,
) => [createQueryKey("networkDetails", options)];

export const networkDetailsOptions = (
  options: OptionsLegacyParser<NetworkDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await networkDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: networkDetailsQueryKey(options),
  });
};

export const detailsCopyQueryKey = (
  options: OptionsLegacyParser<DetailsCopyData>,
) => [createQueryKey("detailsCopy", options)];

export const detailsCopyOptions = (
  options: OptionsLegacyParser<DetailsCopyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await detailsCopy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: detailsCopyQueryKey(options),
  });
};

export const alternativeNamesCopyQueryKey = (
  options: OptionsLegacyParser<AlternativeNamesCopyData>,
) => [createQueryKey("alternativeNamesCopy", options)];

export const alternativeNamesCopyOptions = (
  options: OptionsLegacyParser<AlternativeNamesCopyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await alternativeNamesCopy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: alternativeNamesCopyQueryKey(options),
  });
};

export const reviewDetailsQueryKey = (
  options: OptionsLegacyParser<ReviewDetailsData>,
) => [createQueryKey("reviewDetails", options)];

export const reviewDetailsOptions = (
  options: OptionsLegacyParser<ReviewDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await reviewDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: reviewDetailsQueryKey(options),
  });
};

export const authenticationValidateKeyQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("authenticationValidateKey", options)];

export const authenticationValidateKeyOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationValidateKey({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationValidateKeyQueryKey(options),
  });
};

export const tvSeasonWatchProvidersQueryKey = (
  options: OptionsLegacyParser<TvSeasonWatchProvidersData>,
) => [createQueryKey("tvSeasonWatchProviders", options)];

export const tvSeasonWatchProvidersOptions = (
  options: OptionsLegacyParser<TvSeasonWatchProvidersData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvSeasonWatchProviders({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvSeasonWatchProvidersQueryKey(options),
  });
};

export const configurationCountriesQueryKey = (
  options?: OptionsLegacyParser<ConfigurationCountriesData>,
) => [createQueryKey("configurationCountries", options)];

export const configurationCountriesOptions = (
  options?: OptionsLegacyParser<ConfigurationCountriesData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configurationCountries({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: configurationCountriesQueryKey(options),
  });
};

export const configurationJobsQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("configurationJobs", options),
];

export const configurationJobsOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configurationJobs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: configurationJobsQueryKey(options),
  });
};

export const configurationLanguagesQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("configurationLanguages", options)];

export const configurationLanguagesOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configurationLanguages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: configurationLanguagesQueryKey(options),
  });
};

export const configurationPrimaryTranslationsQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("configurationPrimaryTranslations", options)];

export const configurationPrimaryTranslationsOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configurationPrimaryTranslations({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: configurationPrimaryTranslationsQueryKey(options),
  });
};

export const configurationTimezonesQueryKey = (
  options?: OptionsLegacyParser,
) => [createQueryKey("configurationTimezones", options)];

export const configurationTimezonesOptions = (
  options?: OptionsLegacyParser,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await configurationTimezones({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: configurationTimezonesQueryKey(options),
  });
};

export const authenticationCreateSessionFromLoginQueryKey = (
  options?: OptionsLegacyParser<AuthenticationCreateSessionFromLoginData>,
) => [createQueryKey("authenticationCreateSessionFromLogin", options)];

export const authenticationCreateSessionFromLoginOptions = (
  options?: OptionsLegacyParser<AuthenticationCreateSessionFromLoginData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationCreateSessionFromLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationCreateSessionFromLoginQueryKey(options),
  });
};

export const authenticationCreateSessionFromLoginMutation = (
  options?: Partial<
    OptionsLegacyParser<AuthenticationCreateSessionFromLoginData>
  >,
) => {
  const mutationOptions: UseMutationOptions<
    AuthenticationCreateSessionFromLoginResponse,
    AuthenticationCreateSessionFromLoginError,
    OptionsLegacyParser<AuthenticationCreateSessionFromLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationCreateSessionFromLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const personLatestIdQueryKey = (options?: OptionsLegacyParser) => [
  createQueryKey("personLatestId", options),
];

export const personLatestIdOptions = (options?: OptionsLegacyParser) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await personLatestId({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: personLatestIdQueryKey(options),
  });
};

export const tvEpisodeChangesByIdQueryKey = (
  options: OptionsLegacyParser<TvEpisodeChangesByIdData>,
) => [createQueryKey("tvEpisodeChangesById", options)];

export const tvEpisodeChangesByIdOptions = (
  options: OptionsLegacyParser<TvEpisodeChangesByIdData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeChangesById({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeChangesByIdQueryKey(options),
  });
};

export const tvEpisodeGroupDetailsQueryKey = (
  options: OptionsLegacyParser<TvEpisodeGroupDetailsData>,
) => [createQueryKey("tvEpisodeGroupDetails", options)];

export const tvEpisodeGroupDetailsOptions = (
  options: OptionsLegacyParser<TvEpisodeGroupDetailsData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await tvEpisodeGroupDetails({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: tvEpisodeGroupDetailsQueryKey(options),
  });
};

export const searchCompanyQueryKey = (
  options: OptionsLegacyParser<SearchCompanyData>,
) => [createQueryKey("searchCompany", options)];

export const searchCompanyOptions = (
  options: OptionsLegacyParser<SearchCompanyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchCompany({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchCompanyQueryKey(options),
  });
};

export const searchCompanyInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchCompanyData>,
): QueryKey<OptionsLegacyParser<SearchCompanyData>> => [
  createQueryKey("searchCompany", options, true),
];

export const searchCompanyInfiniteOptions = (
  options: OptionsLegacyParser<SearchCompanyData>,
) => {
  return infiniteQueryOptions<
    SearchCompanyResponse,
    SearchCompanyError,
    InfiniteData<SearchCompanyResponse>,
    QueryKey<OptionsLegacyParser<SearchCompanyData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchCompanyData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchCompanyData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchCompany({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchCompanyInfiniteQueryKey(options),
    },
  );
};

export const searchCollectionQueryKey = (
  options: OptionsLegacyParser<SearchCollectionData>,
) => [createQueryKey("searchCollection", options)];

export const searchCollectionOptions = (
  options: OptionsLegacyParser<SearchCollectionData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchCollection({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchCollectionQueryKey(options),
  });
};

export const searchCollectionInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchCollectionData>,
): QueryKey<OptionsLegacyParser<SearchCollectionData>> => [
  createQueryKey("searchCollection", options, true),
];

export const searchCollectionInfiniteOptions = (
  options: OptionsLegacyParser<SearchCollectionData>,
) => {
  return infiniteQueryOptions<
    SearchCollectionResponse,
    SearchCollectionError,
    InfiniteData<SearchCollectionResponse>,
    QueryKey<OptionsLegacyParser<SearchCollectionData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchCollectionData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchCollectionData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchCollection({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchCollectionInfiniteQueryKey(options),
    },
  );
};

export const searchKeywordQueryKey = (
  options: OptionsLegacyParser<SearchKeywordData>,
) => [createQueryKey("searchKeyword", options)];

export const searchKeywordOptions = (
  options: OptionsLegacyParser<SearchKeywordData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await searchKeyword({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: searchKeywordQueryKey(options),
  });
};

export const searchKeywordInfiniteQueryKey = (
  options: OptionsLegacyParser<SearchKeywordData>,
): QueryKey<OptionsLegacyParser<SearchKeywordData>> => [
  createQueryKey("searchKeyword", options, true),
];

export const searchKeywordInfiniteOptions = (
  options: OptionsLegacyParser<SearchKeywordData>,
) => {
  return infiniteQueryOptions<
    SearchKeywordResponse,
    SearchKeywordError,
    InfiniteData<SearchKeywordResponse>,
    QueryKey<OptionsLegacyParser<SearchKeywordData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<SearchKeywordData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<SearchKeywordData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await searchKeyword({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: searchKeywordInfiniteQueryKey(options),
    },
  );
};

export const listsCopyQueryKey = (
  options: OptionsLegacyParser<ListsCopyData>,
) => [createQueryKey("listsCopy", options)];

export const listsCopyOptions = (
  options: OptionsLegacyParser<ListsCopyData>,
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listsCopy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listsCopyQueryKey(options),
  });
};

export const listsCopyInfiniteQueryKey = (
  options: OptionsLegacyParser<ListsCopyData>,
): QueryKey<OptionsLegacyParser<ListsCopyData>> => [
  createQueryKey("listsCopy", options, true),
];

export const listsCopyInfiniteOptions = (
  options: OptionsLegacyParser<ListsCopyData>,
) => {
  return infiniteQueryOptions<
    ListsCopyResponse,
    ListsCopyError,
    InfiniteData<ListsCopyResponse>,
    QueryKey<OptionsLegacyParser<ListsCopyData>>,
    | number
    | Pick<
        QueryKey<OptionsLegacyParser<ListsCopyData>>[0],
        "body" | "headers" | "path" | "query"
      >
  >(
    // @ts-ignore
    {
      queryFn: async ({ pageParam, queryKey, signal }) => {
        // @ts-ignore
        const page: Pick<
          QueryKey<OptionsLegacyParser<ListsCopyData>>[0],
          "body" | "headers" | "path" | "query"
        > =
          typeof pageParam === "object"
            ? pageParam
            : {
                query: {
                  page: pageParam,
                },
              };
        const params = createInfiniteParams(queryKey, page);
        const { data } = await listsCopy({
          ...options,
          ...params,
          signal,
          throwOnError: true,
        });
        return data;
      },
      queryKey: listsCopyInfiniteQueryKey(options),
    },
  );
};
