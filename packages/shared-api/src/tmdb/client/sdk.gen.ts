// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from "@hey-api/client-fetch";

import type {
  AccountAddFavoriteData,
  AccountAddFavoriteError,
  AccountAddFavoriteResponse,
  AccountAddToWatchlistData,
  AccountAddToWatchlistError,
  AccountAddToWatchlistResponse,
  AccountDetailsData,
  AccountDetailsError,
  AccountDetailsResponse,
  AccountFavoriteTvData,
  AccountFavoriteTvError,
  AccountFavoriteTvResponse,
  AccountGetFavoritesData,
  AccountGetFavoritesError,
  AccountGetFavoritesResponse,
  AccountListsData,
  AccountListsError,
  AccountListsResponse,
  AccountRatedMoviesData,
  AccountRatedMoviesError,
  AccountRatedMoviesResponse,
  AccountRatedTvData,
  AccountRatedTvEpisodesData,
  AccountRatedTvEpisodesError,
  AccountRatedTvEpisodesResponse,
  AccountRatedTvError,
  AccountRatedTvResponse,
  AccountWatchlistMoviesData,
  AccountWatchlistMoviesError,
  AccountWatchlistMoviesResponse,
  AccountWatchlistTvData,
  AccountWatchlistTvError,
  AccountWatchlistTvResponse,
  AlternativeNamesCopyData,
  AlternativeNamesCopyError,
  AlternativeNamesCopyResponse,
  AuthenticationCreateGuestSessionError,
  AuthenticationCreateGuestSessionResponse,
  AuthenticationCreateRequestTokenError,
  AuthenticationCreateRequestTokenResponse,
  AuthenticationCreateSessionData,
  AuthenticationCreateSessionError,
  AuthenticationCreateSessionFromLoginData,
  AuthenticationCreateSessionFromLoginError,
  AuthenticationCreateSessionFromLoginResponse,
  AuthenticationCreateSessionFromV4TokenData,
  AuthenticationCreateSessionFromV4TokenError,
  AuthenticationCreateSessionFromV4TokenResponse,
  AuthenticationCreateSessionResponse,
  AuthenticationDeleteSessionData,
  AuthenticationDeleteSessionError,
  AuthenticationDeleteSessionResponse,
  AuthenticationValidateKeyError,
  AuthenticationValidateKeyResponse,
  CertificationMovieListError,
  CertificationMovieListResponse,
  CertificationsTvListError,
  CertificationsTvListResponse,
  ChangesMovieListData,
  ChangesMovieListError,
  ChangesMovieListResponse,
  ChangesPeopleListData,
  ChangesPeopleListError,
  ChangesPeopleListResponse,
  ChangesTvListData,
  ChangesTvListError,
  ChangesTvListResponse,
  CollectionDetailsData,
  CollectionDetailsError,
  CollectionDetailsResponse,
  CollectionImagesData,
  CollectionImagesError,
  CollectionImagesResponse,
  CollectionTranslationsData,
  CollectionTranslationsError,
  CollectionTranslationsResponse,
  CompanyAlternativeNamesData,
  CompanyAlternativeNamesError,
  CompanyAlternativeNamesResponse,
  CompanyDetailsData,
  CompanyDetailsError,
  CompanyDetailsResponse,
  CompanyImagesData,
  CompanyImagesError,
  CompanyImagesResponse,
  ConfigurationCountriesData,
  ConfigurationCountriesError,
  ConfigurationCountriesResponse,
  ConfigurationDetailsError,
  ConfigurationDetailsResponse,
  ConfigurationJobsError,
  ConfigurationJobsResponse,
  ConfigurationLanguagesError,
  ConfigurationLanguagesResponse,
  ConfigurationPrimaryTranslationsError,
  ConfigurationPrimaryTranslationsResponse,
  ConfigurationTimezonesError,
  ConfigurationTimezonesResponse,
  CreditDetailsData,
  CreditDetailsError,
  CreditDetailsResponse,
  DetailsCopyData,
  DetailsCopyError,
  DetailsCopyResponse,
  DiscoverMovieData,
  DiscoverMovieError,
  DiscoverMovieResponse,
  DiscoverTvData,
  DiscoverTvError,
  DiscoverTvResponse,
  FindByIdData,
  FindByIdError,
  FindByIdResponse,
  GenreMovieListData,
  GenreMovieListError,
  GenreMovieListResponse,
  GenreTvListData,
  GenreTvListError,
  GenreTvListResponse,
  GuestSessionRatedMoviesData,
  GuestSessionRatedMoviesError,
  GuestSessionRatedMoviesResponse,
  GuestSessionRatedTvData,
  GuestSessionRatedTvEpisodesData,
  GuestSessionRatedTvEpisodesError,
  GuestSessionRatedTvEpisodesResponse,
  GuestSessionRatedTvError,
  GuestSessionRatedTvResponse,
  KeywordDetailsData,
  KeywordDetailsError,
  KeywordDetailsResponse,
  KeywordMoviesData,
  KeywordMoviesError,
  KeywordMoviesResponse,
  ListAddMovieData,
  ListAddMovieError,
  ListAddMovieResponse,
  ListCheckItemStatusData,
  ListCheckItemStatusError,
  ListCheckItemStatusResponse,
  ListClearData,
  ListClearError,
  ListClearResponse,
  ListCreateData,
  ListCreateError,
  ListCreateResponse,
  ListDeleteData,
  ListDeleteError,
  ListDeleteResponse,
  ListDetailsData,
  ListDetailsError,
  ListDetailsResponse,
  ListRemoveMovieData,
  ListRemoveMovieError,
  ListRemoveMovieResponse,
  ListsCopyData,
  ListsCopyError,
  ListsCopyResponse,
  MovieAccountStatesData,
  MovieAccountStatesError,
  MovieAccountStatesResponse,
  MovieAddRatingData,
  MovieAddRatingError,
  MovieAddRatingResponse,
  MovieAlternativeTitlesData,
  MovieAlternativeTitlesError,
  MovieAlternativeTitlesResponse,
  MovieChangesData,
  MovieChangesError,
  MovieChangesResponse,
  MovieCreditsData,
  MovieCreditsError,
  MovieCreditsResponse,
  MovieDeleteRatingData,
  MovieDeleteRatingError,
  MovieDeleteRatingResponse,
  MovieDetailsData,
  MovieDetailsError,
  MovieDetailsResponse,
  MovieExternalIdsData,
  MovieExternalIdsError,
  MovieExternalIdsResponse,
  MovieImagesData,
  MovieImagesError,
  MovieImagesResponse,
  MovieKeywordsData,
  MovieKeywordsError,
  MovieKeywordsResponse,
  MovieLatestIdError,
  MovieLatestIdResponse,
  MovieListsData,
  MovieListsError,
  MovieListsResponse,
  MovieNowPlayingListData,
  MovieNowPlayingListError,
  MovieNowPlayingListResponse,
  MoviePopularListData,
  MoviePopularListError,
  MoviePopularListResponse,
  MovieRecommendationsData,
  MovieRecommendationsError,
  MovieRecommendationsResponse,
  MovieReleaseDatesData,
  MovieReleaseDatesError,
  MovieReleaseDatesResponse,
  MovieReviewsData,
  MovieReviewsError,
  MovieReviewsResponse,
  MovieSimilarData,
  MovieSimilarError,
  MovieSimilarResponse,
  MovieTopRatedListData,
  MovieTopRatedListError,
  MovieTopRatedListResponse,
  MovieTranslationsData,
  MovieTranslationsError,
  MovieTranslationsResponse,
  MovieUpcomingListData,
  MovieUpcomingListError,
  MovieUpcomingListResponse,
  MovieVideosData,
  MovieVideosError,
  MovieVideosResponse,
  MovieWatchProvidersData,
  MovieWatchProvidersError,
  MovieWatchProvidersResponse,
  NetworkDetailsData,
  NetworkDetailsError,
  NetworkDetailsResponse,
  PersonChangesData,
  PersonChangesError,
  PersonChangesResponse,
  PersonCombinedCreditsData,
  PersonCombinedCreditsError,
  PersonCombinedCreditsResponse,
  PersonDetailsData,
  PersonDetailsError,
  PersonDetailsResponse,
  PersonExternalIdsData,
  PersonExternalIdsError,
  PersonExternalIdsResponse,
  PersonImagesData,
  PersonImagesError,
  PersonImagesResponse,
  PersonLatestIdError,
  PersonLatestIdResponse,
  PersonMovieCreditsData,
  PersonMovieCreditsError,
  PersonMovieCreditsResponse,
  PersonPopularListData,
  PersonPopularListError,
  PersonPopularListResponse,
  PersonTaggedImagesData,
  PersonTaggedImagesError,
  PersonTaggedImagesResponse,
  PersonTvCreditsData,
  PersonTvCreditsError,
  PersonTvCreditsResponse,
  ReviewDetailsData,
  ReviewDetailsError,
  ReviewDetailsResponse,
  SearchCollectionData,
  SearchCollectionError,
  SearchCollectionResponse,
  SearchCompanyData,
  SearchCompanyError,
  SearchCompanyResponse,
  SearchKeywordData,
  SearchKeywordError,
  SearchKeywordResponse,
  SearchMovieData,
  SearchMovieError,
  SearchMovieResponse,
  SearchMultiData,
  SearchMultiError,
  SearchMultiResponse,
  SearchPersonData,
  SearchPersonError,
  SearchPersonResponse,
  SearchTvData,
  SearchTvError,
  SearchTvResponse,
  TranslationsData,
  TranslationsError,
  TranslationsResponse,
  TrendingAllData,
  TrendingAllError,
  TrendingAllResponse,
  TrendingMoviesData,
  TrendingMoviesError,
  TrendingMoviesResponse,
  TrendingPeopleData,
  TrendingPeopleError,
  TrendingPeopleResponse,
  TrendingTvData,
  TrendingTvError,
  TrendingTvResponse,
  TvEpisodeAccountStatesData,
  TvEpisodeAccountStatesError,
  TvEpisodeAccountStatesResponse,
  TvEpisodeAddRatingData,
  TvEpisodeAddRatingError,
  TvEpisodeAddRatingResponse,
  TvEpisodeChangesByIdData,
  TvEpisodeChangesByIdError,
  TvEpisodeChangesByIdResponse,
  TvEpisodeCreditsData,
  TvEpisodeCreditsError,
  TvEpisodeCreditsResponse,
  TvEpisodeDeleteRatingData,
  TvEpisodeDeleteRatingError,
  TvEpisodeDeleteRatingResponse,
  TvEpisodeDetailsData,
  TvEpisodeDetailsError,
  TvEpisodeDetailsResponse,
  TvEpisodeExternalIdsData,
  TvEpisodeExternalIdsError,
  TvEpisodeExternalIdsResponse,
  TvEpisodeGroupDetailsData,
  TvEpisodeGroupDetailsError,
  TvEpisodeGroupDetailsResponse,
  TvEpisodeImagesData,
  TvEpisodeImagesError,
  TvEpisodeImagesResponse,
  TvEpisodeTranslationsData,
  TvEpisodeTranslationsError,
  TvEpisodeTranslationsResponse,
  TvEpisodeVideosData,
  TvEpisodeVideosError,
  TvEpisodeVideosResponse,
  TvSeasonAccountStatesData,
  TvSeasonAccountStatesError,
  TvSeasonAccountStatesResponse,
  TvSeasonAggregateCreditsData,
  TvSeasonAggregateCreditsError,
  TvSeasonAggregateCreditsResponse,
  TvSeasonChangesByIdData,
  TvSeasonChangesByIdError,
  TvSeasonChangesByIdResponse,
  TvSeasonCreditsData,
  TvSeasonCreditsError,
  TvSeasonCreditsResponse,
  TvSeasonDetailsData,
  TvSeasonDetailsError,
  TvSeasonDetailsResponse,
  TvSeasonExternalIdsData,
  TvSeasonExternalIdsError,
  TvSeasonExternalIdsResponse,
  TvSeasonImagesData,
  TvSeasonImagesError,
  TvSeasonImagesResponse,
  TvSeasonTranslationsData,
  TvSeasonTranslationsError,
  TvSeasonTranslationsResponse,
  TvSeasonVideosData,
  TvSeasonVideosError,
  TvSeasonVideosResponse,
  TvSeasonWatchProvidersData,
  TvSeasonWatchProvidersError,
  TvSeasonWatchProvidersResponse,
  TvSeriesAccountStatesData,
  TvSeriesAccountStatesError,
  TvSeriesAccountStatesResponse,
  TvSeriesAddRatingData,
  TvSeriesAddRatingError,
  TvSeriesAddRatingResponse,
  TvSeriesAggregateCreditsData,
  TvSeriesAggregateCreditsError,
  TvSeriesAggregateCreditsResponse,
  TvSeriesAiringTodayListData,
  TvSeriesAiringTodayListError,
  TvSeriesAiringTodayListResponse,
  TvSeriesAlternativeTitlesData,
  TvSeriesAlternativeTitlesError,
  TvSeriesAlternativeTitlesResponse,
  TvSeriesChangesData,
  TvSeriesChangesError,
  TvSeriesChangesResponse,
  TvSeriesContentRatingsData,
  TvSeriesContentRatingsError,
  TvSeriesContentRatingsResponse,
  TvSeriesCreditsData,
  TvSeriesCreditsError,
  TvSeriesCreditsResponse,
  TvSeriesDeleteRatingData,
  TvSeriesDeleteRatingError,
  TvSeriesDeleteRatingResponse,
  TvSeriesDetailsData,
  TvSeriesDetailsError,
  TvSeriesDetailsResponse,
  TvSeriesEpisodeGroupsData,
  TvSeriesEpisodeGroupsError,
  TvSeriesEpisodeGroupsResponse,
  TvSeriesExternalIdsData,
  TvSeriesExternalIdsError,
  TvSeriesExternalIdsResponse,
  TvSeriesImagesData,
  TvSeriesImagesError,
  TvSeriesImagesResponse,
  TvSeriesKeywordsData,
  TvSeriesKeywordsError,
  TvSeriesKeywordsResponse,
  TvSeriesLatestIdError,
  TvSeriesLatestIdResponse,
  TvSeriesOnTheAirListData,
  TvSeriesOnTheAirListError,
  TvSeriesOnTheAirListResponse,
  TvSeriesPopularListData,
  TvSeriesPopularListError,
  TvSeriesPopularListResponse,
  TvSeriesRecommendationsData,
  TvSeriesRecommendationsError,
  TvSeriesRecommendationsResponse,
  TvSeriesReviewsData,
  TvSeriesReviewsError,
  TvSeriesReviewsResponse,
  TvSeriesScreenedTheatricallyData,
  TvSeriesScreenedTheatricallyError,
  TvSeriesScreenedTheatricallyResponse,
  TvSeriesSimilarData,
  TvSeriesSimilarError,
  TvSeriesSimilarResponse,
  TvSeriesTopRatedListData,
  TvSeriesTopRatedListError,
  TvSeriesTopRatedListResponse,
  TvSeriesTranslationsData,
  TvSeriesTranslationsError,
  TvSeriesTranslationsResponse,
  TvSeriesVideosData,
  TvSeriesVideosError,
  TvSeriesVideosResponse,
  TvSeriesWatchProvidersData,
  TvSeriesWatchProvidersError,
  TvSeriesWatchProvidersResponse,
  WatchProvidersAvailableRegionsData,
  WatchProvidersAvailableRegionsError,
  WatchProvidersAvailableRegionsResponse,
  WatchProvidersMovieListData,
  WatchProvidersMovieListError,
  WatchProvidersMovieListResponse,
  WatchProviderTvListData,
  WatchProviderTvListError,
  WatchProviderTvListResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Movie
 * Search for movies by their original, translated and alternative titles.
 */
export const searchMovie = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchMovieData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchMovieResponse,
    SearchMovieError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/movie",
  });
};

/**
 * Movie
 * Find movies using over 30 filters and sort options.
 */
export const discoverMovie = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<DiscoverMovieData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    DiscoverMovieResponse,
    DiscoverMovieError,
    ThrowOnError
  >({
    ...options,
    url: "/3/discover/movie",
  });
};

/**
 * Details
 * Get the top level details of a movie by ID.
 */
export const movieDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieDetailsResponse,
    MovieDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}",
  });
};

/**
 * Details
 * Get the details of a TV show.
 */
export const tvSeriesDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesDetailsResponse,
    TvSeriesDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}",
  });
};

/**
 * TV
 * Search for TV shows by their original, translated and also known as names.
 */
export const searchTv = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchTvResponse,
    SearchTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/tv",
  });
};

/**
 * Multi
 * Use multi search when you want to search for movies, TV shows and people in a single request.
 */
export const searchMulti = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchMultiData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchMultiResponse,
    SearchMultiError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/multi",
  });
};

/**
 * Person
 * Search for people by their name and also known as names.
 */
export const searchPerson = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchPersonData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchPersonResponse,
    SearchPersonError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/person",
  });
};

/**
 * Details
 * Query the API configuration details.
 */
export const configurationDetails = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConfigurationDetailsResponse,
    ConfigurationDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/configuration",
  });
};

/**
 * Details
 * Query the details of a TV season.
 */
export const tvSeasonDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonDetailsResponse,
    TvSeasonDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}",
  });
};

/**
 * Details
 * Query the details of a TV episode.
 */
export const tvEpisodeDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeDetailsResponse,
    TvEpisodeDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}",
  });
};

/**
 * TV
 * Find TV shows using over 30 filters and sort options.
 */
export const discoverTv = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<DiscoverTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    DiscoverTvResponse,
    DiscoverTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/discover/tv",
  });
};

/**
 * Images
 * Get the images that belong to a movie.
 */
export const movieImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieImagesResponse,
    MovieImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/images",
  });
};

/**
 * Images
 * Get the images that belong to a TV series.
 */
export const tvSeriesImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesImagesResponse,
    TvSeriesImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/images",
  });
};

/**
 * Images
 * Get the images that belong to a TV season.
 */
export const tvSeasonImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonImagesResponse,
    TvSeasonImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/images",
  });
};

/**
 * Images
 * Get the images that belong to a TV episode.
 */
export const tvEpisodeImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeImagesResponse,
    TvEpisodeImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images",
  });
};

/**
 * All
 * Get the trending movies, TV shows and people.
 */
export const trendingAll = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TrendingAllData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TrendingAllResponse,
    TrendingAllError,
    ThrowOnError
  >({
    ...options,
    url: "/3/trending/all/{time_window}",
  });
};

/**
 * Movies
 * Get the trending movies on TMDB.
 */
export const trendingMovies = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TrendingMoviesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TrendingMoviesResponse,
    TrendingMoviesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/trending/movie/{time_window}",
  });
};

/**
 * TV
 * Get the trending TV shows on TMDB.
 */
export const trendingTv = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TrendingTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TrendingTvResponse,
    TrendingTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/trending/tv/{time_window}",
  });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status of an account.
 */
export const movieAccountStates = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieAccountStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieAccountStatesResponse,
    MovieAccountStatesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/account_states",
  });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status.
 */
export const tvSeriesAccountStates = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesAccountStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesAccountStatesResponse,
    TvSeriesAccountStatesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/account_states",
  });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status.
 */
export const tvEpisodeAccountStates = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeAccountStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeAccountStatesResponse,
    TvEpisodeAccountStatesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states",
  });
};

/**
 * People
 * Get the trending people on TMDB.
 */
export const trendingPeople = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TrendingPeopleData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TrendingPeopleResponse,
    TrendingPeopleError,
    ThrowOnError
  >({
    ...options,
    url: "/3/trending/person/{time_window}",
  });
};

/**
 * Alternative Titles
 * Get the alternative titles for a movie.
 */
export const movieAlternativeTitles = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieAlternativeTitlesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieAlternativeTitlesResponse,
    MovieAlternativeTitlesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/alternative_titles",
  });
};

/**
 * Changes
 * Get the recent changes for a movie.
 */
export const movieChanges = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieChangesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieChangesResponse,
    MovieChangesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/changes",
  });
};

/**
 * Credits
 */
export const movieCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieCreditsResponse,
    MovieCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/credits",
  });
};

/**
 * External IDs
 */
export const movieExternalIds = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieExternalIdsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieExternalIdsResponse,
    MovieExternalIdsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/external_ids",
  });
};

/**
 * Keywords
 */
export const movieKeywords = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieKeywordsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieKeywordsResponse,
    MovieKeywordsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/keywords",
  });
};

/**
 * Lists
 * Get the lists that a movie has been added to.
 */
export const movieLists = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieListsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieListsResponse,
    MovieListsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/lists",
  });
};

/**
 * Recommendations
 */
export const movieRecommendations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieRecommendationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieRecommendationsResponse,
    MovieRecommendationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/recommendations",
  });
};

/**
 * Release Dates
 * Get the release dates and certifications for a movie.
 */
export const movieReleaseDates = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieReleaseDatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieReleaseDatesResponse,
    MovieReleaseDatesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/release_dates",
  });
};

/**
 * Reviews
 * Get the user reviews for a movie.
 */
export const movieReviews = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieReviewsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieReviewsResponse,
    MovieReviewsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/reviews",
  });
};

/**
 * Similar
 * Get the similar movies based on genres and keywords.
 */
export const movieSimilar = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieSimilarData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieSimilarResponse,
    MovieSimilarError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/similar",
  });
};

/**
 * Translations
 * Get the translations for a movie.
 */
export const movieTranslations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieTranslationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieTranslationsResponse,
    MovieTranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/translations",
  });
};

/**
 * Videos
 */
export const movieVideos = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieVideosData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieVideosResponse,
    MovieVideosError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/videos",
  });
};

/**
 * Watch Providers
 * Get the list of streaming providers we have for a movie.
 */
export const movieWatchProviders = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieWatchProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieWatchProvidersResponse,
    MovieWatchProvidersError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/watch/providers",
  });
};

/**
 * Add Rating
 * Rate a movie and save it to your rated list.
 */
export const movieAddRating = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieAddRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    MovieAddRatingResponse,
    MovieAddRatingError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/rating",
  });
};

/**
 * Delete Rating
 * Delete a user rating.
 */
export const movieDeleteRating = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<MovieDeleteRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    MovieDeleteRatingResponse,
    MovieDeleteRatingError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/{movie_id}/rating",
  });
};

/**
 * Create Guest Session
 */
export const authenticationCreateGuestSession = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuthenticationCreateGuestSessionResponse,
    AuthenticationCreateGuestSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication/guest_session/new",
  });
};

/**
 * Create Request Token
 */
export const authenticationCreateRequestToken = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuthenticationCreateRequestTokenResponse,
    AuthenticationCreateRequestTokenError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication/token/new",
  });
};

/**
 * Create Session
 */
export const authenticationCreateSession = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<AuthenticationCreateSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AuthenticationCreateSessionResponse,
    AuthenticationCreateSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication/session/new",
  });
};

/**
 * Create Session (from v4 token)
 */
export const authenticationCreateSessionFromV4Token = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<
    AuthenticationCreateSessionFromV4TokenData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    AuthenticationCreateSessionFromV4TokenResponse,
    AuthenticationCreateSessionFromV4TokenError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication/session/convert/4",
  });
};

/**
 * Delete Session
 */
export const authenticationDeleteSession = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<AuthenticationDeleteSessionData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    AuthenticationDeleteSessionResponse,
    AuthenticationDeleteSessionError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication/session",
  });
};

/**
 * Find By ID
 * Find data by external ID's.
 */
export const findById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<FindByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    FindByIdResponse,
    FindByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/3/find/{external_id}",
  });
};

/**
 * Details
 * Query the top level details of a person.
 */
export const personDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonDetailsResponse,
    PersonDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}",
  });
};

/**
 * Changes
 * Get the recent changes for a person.
 */
export const personChanges = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonChangesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonChangesResponse,
    PersonChangesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/changes",
  });
};

/**
 * Changes
 * Get the recent changes for a TV show.
 */
export const tvSeriesChanges = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesChangesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesChangesResponse,
    TvSeriesChangesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/changes",
  });
};

/**
 * Images
 * Get the profile images that belong to a person.
 */
export const personImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonImagesResponse,
    PersonImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/images",
  });
};

/**
 * Movie Credits
 * Get the movie credits for a person.
 */
export const personMovieCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonMovieCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonMovieCreditsResponse,
    PersonMovieCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/movie_credits",
  });
};

/**
 * TV Credits
 * Get the TV credits that belong to a person.
 */
export const personTvCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonTvCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonTvCreditsResponse,
    PersonTvCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/tv_credits",
  });
};

/**
 * Combined Credits
 * Get the combined movie and TV credits that belong to a person.
 */
export const personCombinedCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonCombinedCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonCombinedCreditsResponse,
    PersonCombinedCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/combined_credits",
  });
};

/**
 * External IDs
 * Get the external ID's that belong to a person.
 */
export const personExternalIds = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonExternalIdsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonExternalIdsResponse,
    PersonExternalIdsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/external_ids",
  });
};

/**
 * Tagged Images
 * Get the tagged images for a person.
 */
export const personTaggedImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PersonTaggedImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonTaggedImagesResponse,
    PersonTaggedImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/tagged_images",
  });
};

/**
 * Translations
 * Get the translations that belong to a person.
 */
export const translations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TranslationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TranslationsResponse,
    TranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/{person_id}/translations",
  });
};

/**
 * Popular
 * Get a list of people ordered by popularity.
 */
export const personPopularList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<PersonPopularListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonPopularListResponse,
    PersonPopularListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/popular",
  });
};

/**
 * Popular
 * Get a list of movies ordered by popularity.
 */
export const moviePopularList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<MoviePopularListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MoviePopularListResponse,
    MoviePopularListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/popular",
  });
};

/**
 * Top Rated
 * Get a list of movies ordered by rating.
 */
export const movieTopRatedList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<MovieTopRatedListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieTopRatedListResponse,
    MovieTopRatedListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/top_rated",
  });
};

/**
 * Upcoming
 * Get a list of movies that are being released soon.
 */
export const movieUpcomingList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<MovieUpcomingListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieUpcomingListResponse,
    MovieUpcomingListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/upcoming",
  });
};

/**
 * Now Playing
 * Get a list of movies that are currently in theatres.
 */
export const movieNowPlayingList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<MovieNowPlayingListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieNowPlayingListResponse,
    MovieNowPlayingListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/now_playing",
  });
};

/**
 * Airing Today
 * Get a list of TV shows airing today.
 */
export const tvSeriesAiringTodayList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<TvSeriesAiringTodayListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesAiringTodayListResponse,
    TvSeriesAiringTodayListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/airing_today",
  });
};

/**
 * On The Air
 * Get a list of TV shows that air in the next 7 days.
 */
export const tvSeriesOnTheAirList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<TvSeriesOnTheAirListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesOnTheAirListResponse,
    TvSeriesOnTheAirListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/on_the_air",
  });
};

/**
 * Popular
 * Get a list of TV shows ordered by popularity.
 */
export const tvSeriesPopularList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<TvSeriesPopularListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesPopularListResponse,
    TvSeriesPopularListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/popular",
  });
};

/**
 * Top Rated
 * Get a list of TV shows ordered by rating.
 */
export const tvSeriesTopRatedList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<TvSeriesTopRatedListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesTopRatedListResponse,
    TvSeriesTopRatedListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/top_rated",
  });
};

/**
 * Latest
 * Get the newest movie ID.
 */
export const movieLatestId = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    MovieLatestIdResponse,
    MovieLatestIdError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/latest",
  });
};

/**
 * Latest
 * Get the newest TV show ID.
 */
export const tvSeriesLatestId = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesLatestIdResponse,
    TvSeriesLatestIdError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/latest",
  });
};

/**
 * Aggregate Credits
 * Get the aggregate credits (cast and crew) that have been added to a TV show.
 */
export const tvSeriesAggregateCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesAggregateCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesAggregateCreditsResponse,
    TvSeriesAggregateCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/aggregate_credits",
  });
};

/**
 * Alternative Titles
 * Get the alternative titles that have been added to a TV show.
 */
export const tvSeriesAlternativeTitles = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesAlternativeTitlesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesAlternativeTitlesResponse,
    TvSeriesAlternativeTitlesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/alternative_titles",
  });
};

/**
 * Content Ratings
 * Get the content ratings that have been added to a TV show.
 */
export const tvSeriesContentRatings = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesContentRatingsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesContentRatingsResponse,
    TvSeriesContentRatingsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/content_ratings",
  });
};

/**
 * Credits
 * Get the latest season credits of a TV show.
 */
export const tvSeriesCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesCreditsResponse,
    TvSeriesCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/credits",
  });
};

/**
 * Episode Groups
 * Get the episode groups that have been added to a TV show.
 */
export const tvSeriesEpisodeGroups = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesEpisodeGroupsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesEpisodeGroupsResponse,
    TvSeriesEpisodeGroupsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/episode_groups",
  });
};

/**
 * External IDs
 * Get a list of external IDs that have been added to a TV show.
 */
export const tvSeriesExternalIds = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesExternalIdsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesExternalIdsResponse,
    TvSeriesExternalIdsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/external_ids",
  });
};

/**
 * Keywords
 * Get a list of keywords that have been added to a TV show.
 */
export const tvSeriesKeywords = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesKeywordsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesKeywordsResponse,
    TvSeriesKeywordsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/keywords",
  });
};

/**
 * Recommendations
 */
export const tvSeriesRecommendations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesRecommendationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesRecommendationsResponse,
    TvSeriesRecommendationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/recommendations",
  });
};

/**
 * Reviews
 * Get the reviews that have been added to a TV show.
 */
export const tvSeriesReviews = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesReviewsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesReviewsResponse,
    TvSeriesReviewsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/reviews",
  });
};

/**
 * Screened Theatrically
 * Get the seasons and episodes that have screened theatrically.
 */
export const tvSeriesScreenedTheatrically = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<TvSeriesScreenedTheatricallyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesScreenedTheatricallyResponse,
    TvSeriesScreenedTheatricallyError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/screened_theatrically",
  });
};

/**
 * Similar
 * Get the similar TV shows.
 */
export const tvSeriesSimilar = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesSimilarData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesSimilarResponse,
    TvSeriesSimilarError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/similar",
  });
};

/**
 * Translations
 * Get the translations that have been added to a TV show.
 */
export const tvSeriesTranslations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesTranslationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesTranslationsResponse,
    TvSeriesTranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/translations",
  });
};

/**
 * Videos
 * Get the videos that belong to a TV show.
 */
export const tvSeriesVideos = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesVideosData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesVideosResponse,
    TvSeriesVideosError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/videos",
  });
};

/**
 * Watch Providers
 * Get the list of streaming providers we have for a TV show.
 */
export const tvSeriesWatchProviders = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesWatchProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeriesWatchProvidersResponse,
    TvSeriesWatchProvidersError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/watch/providers",
  });
};

/**
 * Add Rating
 * Rate a TV show and save it to your rated list.
 */
export const tvSeriesAddRating = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesAddRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TvSeriesAddRatingResponse,
    TvSeriesAddRatingError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/rating",
  });
};

/**
 * Delete Rating
 */
export const tvSeriesDeleteRating = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeriesDeleteRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    TvSeriesDeleteRatingResponse,
    TvSeriesDeleteRatingError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/rating",
  });
};

/**
 * Account States
 * Get the rating, watchlist and favourite status.
 */
export const tvSeasonAccountStates = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonAccountStatesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonAccountStatesResponse,
    TvSeasonAccountStatesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/account_states",
  });
};

/**
 * Aggregate Credits
 * Get the aggregate credits (cast and crew) that have been added to a TV season.
 */
export const tvSeasonAggregateCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonAggregateCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonAggregateCreditsResponse,
    TvSeasonAggregateCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/aggregate_credits",
  });
};

/**
 * Changes
 * Get the recent changes for a TV season.
 */
export const tvSeasonChangesById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonChangesByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonChangesByIdResponse,
    TvSeasonChangesByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/season/{season_id}/changes",
  });
};

/**
 * Credits
 */
export const tvSeasonCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonCreditsResponse,
    TvSeasonCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/credits",
  });
};

/**
 * External IDs
 * Get a list of external IDs that have been added to a TV season.
 */
export const tvSeasonExternalIds = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonExternalIdsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonExternalIdsResponse,
    TvSeasonExternalIdsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/external_ids",
  });
};

/**
 * Translations
 * Get the translations for a TV season.
 */
export const tvSeasonTranslations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonTranslationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonTranslationsResponse,
    TvSeasonTranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/translations",
  });
};

/**
 * Videos
 * Get the videos that belong to a TV season.
 */
export const tvSeasonVideos = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonVideosData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonVideosResponse,
    TvSeasonVideosError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/videos",
  });
};

/**
 * Credits
 */
export const tvEpisodeCredits = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeCreditsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeCreditsResponse,
    TvEpisodeCreditsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits",
  });
};

/**
 * External IDs
 * Get a list of external IDs that have been added to a TV episode.
 */
export const tvEpisodeExternalIds = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeExternalIdsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeExternalIdsResponse,
    TvEpisodeExternalIdsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids",
  });
};

/**
 * Translations
 * Get the translations that have been added to a TV episode.
 */
export const tvEpisodeTranslations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeTranslationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeTranslationsResponse,
    TvEpisodeTranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations",
  });
};

/**
 * Videos
 * Get the videos that belong to a TV episode.
 */
export const tvEpisodeVideos = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeVideosData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeVideosResponse,
    TvEpisodeVideosError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos",
  });
};

/**
 * Add Rating
 * Rate a TV episode and save it to your rated list.
 */
export const tvEpisodeAddRating = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeAddRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    TvEpisodeAddRatingResponse,
    TvEpisodeAddRatingError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating",
  });
};

/**
 * Delete Rating
 * Delete your rating on a TV episode.
 */
export const tvEpisodeDeleteRating = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeDeleteRatingData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    TvEpisodeDeleteRatingResponse,
    TvEpisodeDeleteRatingError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/rating",
  });
};

/**
 * Details
 * Get the public details of an account on TMDB.
 */
export const accountDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountDetailsResponse,
    AccountDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}",
  });
};

/**
 * Lists
 * Get a users list of custom lists.
 */
export const accountLists = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountListsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountListsResponse,
    AccountListsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/lists",
  });
};

/**
 * Favorite Movies
 * Get a users list of favourite movies.
 */
export const accountGetFavorites = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountGetFavoritesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountGetFavoritesResponse,
    AccountGetFavoritesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/favorite/movies",
  });
};

/**
 * Favorite TV
 * Get a users list of favourite TV shows.
 */
export const accountFavoriteTv = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountFavoriteTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountFavoriteTvResponse,
    AccountFavoriteTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/favorite/tv",
  });
};

/**
 * Rated Movies
 * Get a users list of rated movies.
 */
export const accountRatedMovies = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountRatedMoviesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountRatedMoviesResponse,
    AccountRatedMoviesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/rated/movies",
  });
};

/**
 * Rated TV
 * Get a users list of rated TV shows.
 */
export const accountRatedTv = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountRatedTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountRatedTvResponse,
    AccountRatedTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/rated/tv",
  });
};

/**
 * Rated TV Episodes
 * Get a users list of rated TV episodes.
 */
export const accountRatedTvEpisodes = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountRatedTvEpisodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountRatedTvEpisodesResponse,
    AccountRatedTvEpisodesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/rated/tv/episodes",
  });
};

/**
 * Watchlist Movies
 * Get a list of movies added to a users watchlist.
 */
export const accountWatchlistMovies = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountWatchlistMoviesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountWatchlistMoviesResponse,
    AccountWatchlistMoviesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/watchlist/movies",
  });
};

/**
 * Watchlist TV
 * Get a list of TV shows added to a users watchlist.
 */
export const accountWatchlistTv = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountWatchlistTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AccountWatchlistTvResponse,
    AccountWatchlistTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/watchlist/tv",
  });
};

/**
 * Add Favorite
 * Mark a movie or TV show as a favourite.
 */
export const accountAddFavorite = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountAddFavoriteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AccountAddFavoriteResponse,
    AccountAddFavoriteError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/favorite",
  });
};

/**
 * Add To Watchlist
 * Add a movie or TV show to your watchlist.
 */
export const accountAddToWatchlist = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AccountAddToWatchlistData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    AccountAddToWatchlistResponse,
    AccountAddToWatchlistError,
    ThrowOnError
  >({
    ...options,
    url: "/3/account/{account_id}/watchlist",
  });
};

/**
 * Movie Certifications
 * Get an up to date list of the officially supported movie certifications on TMDB.
 */
export const certificationMovieList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CertificationMovieListResponse,
    CertificationMovieListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/certification/movie/list",
  });
};

/**
 * TV Certifications
 */
export const certificationsTvList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CertificationsTvListResponse,
    CertificationsTvListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/certification/tv/list",
  });
};

/**
 * Movie List
 * Get a list of all of the movie ids that have been changed in the past 24 hours.
 */
export const changesMovieList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ChangesMovieListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ChangesMovieListResponse,
    ChangesMovieListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/movie/changes",
  });
};

/**
 * TV List
 */
export const changesTvList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ChangesTvListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ChangesTvListResponse,
    ChangesTvListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/changes",
  });
};

/**
 * People List
 */
export const changesPeopleList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ChangesPeopleListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ChangesPeopleListResponse,
    ChangesPeopleListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/changes",
  });
};

/**
 * Details
 * Get collection details by ID.
 */
export const collectionDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CollectionDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CollectionDetailsResponse,
    CollectionDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/collection/{collection_id}",
  });
};

/**
 * Images
 * Get the images that belong to a collection.
 */
export const collectionImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CollectionImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CollectionImagesResponse,
    CollectionImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/collection/{collection_id}/images",
  });
};

/**
 * Translations
 */
export const collectionTranslations = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CollectionTranslationsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CollectionTranslationsResponse,
    CollectionTranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/collection/{collection_id}/translations",
  });
};

/**
 * Details
 * Get the company details by ID.
 */
export const companyDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CompanyDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CompanyDetailsResponse,
    CompanyDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/company/{company_id}",
  });
};

/**
 * Alternative Names
 * Get the company details by ID.
 */
export const companyAlternativeNames = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CompanyAlternativeNamesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CompanyAlternativeNamesResponse,
    CompanyAlternativeNamesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/company/{company_id}/alternative_names",
  });
};

/**
 * Images
 * Get the company logos by id.
 */
export const companyImages = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CompanyImagesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CompanyImagesResponse,
    CompanyImagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/company/{company_id}/images",
  });
};

/**
 * Details
 * Get a movie or TV credit details by ID.
 */
export const creditDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<CreditDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CreditDetailsResponse,
    CreditDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/credit/{credit_id}",
  });
};

/**
 * Movie List
 * Get the list of official genres for movies.
 */
export const genreMovieList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GenreMovieListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GenreMovieListResponse,
    GenreMovieListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/genre/movie/list",
  });
};

/**
 * TV List
 * Get the list of official genres for TV shows.
 */
export const genreTvList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<GenreTvListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GenreTvListResponse,
    GenreTvListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/genre/tv/list",
  });
};

/**
 * Rated Movies
 * Get the rated movies for a guest session.
 */
export const guestSessionRatedMovies = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GuestSessionRatedMoviesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GuestSessionRatedMoviesResponse,
    GuestSessionRatedMoviesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/guest_session/{guest_session_id}/rated/movies",
  });
};

/**
 * Rated TV
 * Get the rated TV shows for a guest session.
 */
export const guestSessionRatedTv = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GuestSessionRatedTvData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GuestSessionRatedTvResponse,
    GuestSessionRatedTvError,
    ThrowOnError
  >({
    ...options,
    url: "/3/guest_session/{guest_session_id}/rated/tv",
  });
};

/**
 * Rated TV Episodes
 * Get the rated TV episodes for a guest session.
 */
export const guestSessionRatedTvEpisodes = <
  ThrowOnError extends boolean = false,
>(
  options: OptionsLegacyParser<GuestSessionRatedTvEpisodesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GuestSessionRatedTvEpisodesResponse,
    GuestSessionRatedTvEpisodesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/guest_session/{guest_session_id}/rated/tv/episodes",
  });
};

/**
 * Available Regions
 * Get the list of the countries we have watch provider (OTT/streaming) data for.
 */
export const watchProvidersAvailableRegions = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<
    WatchProvidersAvailableRegionsData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).get<
    WatchProvidersAvailableRegionsResponse,
    WatchProvidersAvailableRegionsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/watch/providers/regions",
  });
};

/**
 * Movie Providers
 * Get the list of streaming providers we have for movies.
 */
export const watchProvidersMovieList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<WatchProvidersMovieListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WatchProvidersMovieListResponse,
    WatchProvidersMovieListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/watch/providers/movie",
  });
};

/**
 * TV Providers
 * Get the list of streaming providers we have for TV shows.
 */
export const watchProviderTvList = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<WatchProviderTvListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    WatchProviderTvListResponse,
    WatchProviderTvListError,
    ThrowOnError
  >({
    ...options,
    url: "/3/watch/providers/tv",
  });
};

/**
 * Details
 */
export const keywordDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<KeywordDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    KeywordDetailsResponse,
    KeywordDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/keyword/{keyword_id}",
  });
};

/**
 * Movies
 */
export const keywordMovies = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<KeywordMoviesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    KeywordMoviesResponse,
    KeywordMoviesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/keyword/{keyword_id}/movies",
  });
};

/**
 * Details
 */
export const listDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListDetailsResponse,
    ListDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list/{list_id}",
  });
};

/**
 * Delete
 * Delete a list.
 */
export const listDelete = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    ListDeleteResponse,
    ListDeleteError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list/{list_id}",
  });
};

/**
 * Check Item Status
 * Use this method to check if an item has already been added to the list.
 */
export const listCheckItemStatus = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListCheckItemStatusData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListCheckItemStatusResponse,
    ListCheckItemStatusError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list/{list_id}/item_status",
  });
};

/**
 * Create
 */
export const listCreate = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListCreateData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ListCreateResponse,
    ListCreateError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list",
  });
};

/**
 * Add Movie
 * Add a movie to a list.
 */
export const listAddMovie = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListAddMovieData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ListAddMovieResponse,
    ListAddMovieError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list/{list_id}/add_item",
  });
};

/**
 * Remove Movie
 * Remove a movie from a list.
 */
export const listRemoveMovie = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListRemoveMovieData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ListRemoveMovieResponse,
    ListRemoveMovieError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list/{list_id}/remove_item",
  });
};

/**
 * Clear
 * Clear all items from a list.
 */
export const listClear = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListClearData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ListClearResponse,
    ListClearError,
    ThrowOnError
  >({
    ...options,
    url: "/3/list/{list_id}/clear",
  });
};

/**
 * Details
 */
export const networkDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<NetworkDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    NetworkDetailsResponse,
    NetworkDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/network/{network_id}",
  });
};

/**
 * Alternative Names
 * Get the alternative names of a network.
 */
export const detailsCopy = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<DetailsCopyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    DetailsCopyResponse,
    DetailsCopyError,
    ThrowOnError
  >({
    ...options,
    url: "/3/network/{network_id}/alternative_names",
  });
};

/**
 * Images
 * Get the TV network logos by id.
 */
export const alternativeNamesCopy = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<AlternativeNamesCopyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AlternativeNamesCopyResponse,
    AlternativeNamesCopyError,
    ThrowOnError
  >({
    ...options,
    url: "/3/network/{network_id}/images",
  });
};

/**
 * Details
 * Retrieve the details of a movie or TV show review.
 */
export const reviewDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ReviewDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ReviewDetailsResponse,
    ReviewDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/review/{review_id}",
  });
};

/**
 * Validate Key
 * Test your API Key to see if it's valid.
 */
export const authenticationValidateKey = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    AuthenticationValidateKeyResponse,
    AuthenticationValidateKeyError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication",
  });
};

/**
 * Watch Providers
 * Get the list of streaming providers we have for a TV season.
 */
export const tvSeasonWatchProviders = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvSeasonWatchProvidersData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvSeasonWatchProvidersResponse,
    TvSeasonWatchProvidersError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/season/{season_number}/watch/providers",
  });
};

/**
 * Countries
 * Get the list of countries (ISO 3166-1 tags) used throughout TMDB.
 */
export const configurationCountries = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<ConfigurationCountriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConfigurationCountriesResponse,
    ConfigurationCountriesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/configuration/countries",
  });
};

/**
 * Jobs
 * Get the list of the jobs and departments we use on TMDB.
 */
export const configurationJobs = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConfigurationJobsResponse,
    ConfigurationJobsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/configuration/jobs",
  });
};

/**
 * Languages
 * Get the list of languages (ISO 639-1 tags) used throughout TMDB.
 */
export const configurationLanguages = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConfigurationLanguagesResponse,
    ConfigurationLanguagesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/configuration/languages",
  });
};

/**
 * Primary Translations
 * Get a list of the officially supported translations on TMDB.
 */
export const configurationPrimaryTranslations = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConfigurationPrimaryTranslationsResponse,
    ConfigurationPrimaryTranslationsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/configuration/primary_translations",
  });
};

/**
 * Timezones
 * Get the list of timezones used throughout TMDB.
 */
export const configurationTimezones = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ConfigurationTimezonesResponse,
    ConfigurationTimezonesError,
    ThrowOnError
  >({
    ...options,
    url: "/3/configuration/timezones",
  });
};

/**
 * Create Session (with login)
 * This method allows an application to validate a request token by entering a username and password.
 */
export const authenticationCreateSessionFromLogin = <
  ThrowOnError extends boolean = false,
>(
  options?: OptionsLegacyParser<
    AuthenticationCreateSessionFromLoginData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? client).post<
    AuthenticationCreateSessionFromLoginResponse,
    AuthenticationCreateSessionFromLoginError,
    ThrowOnError
  >({
    ...options,
    url: "/3/authentication/token/validate_with_login",
  });
};

/**
 * Latest
 * Get the newest created person. This is a live response and will continuously change.
 */
export const personLatestId = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    PersonLatestIdResponse,
    PersonLatestIdError,
    ThrowOnError
  >({
    ...options,
    url: "/3/person/latest",
  });
};

/**
 * Changes
 * Get the recent changes for a TV episode.
 */
export const tvEpisodeChangesById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeChangesByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeChangesByIdResponse,
    TvEpisodeChangesByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/episode/{episode_id}/changes",
  });
};

/**
 * Details
 * Get the details of a TV episode group.
 */
export const tvEpisodeGroupDetails = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<TvEpisodeGroupDetailsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    TvEpisodeGroupDetailsResponse,
    TvEpisodeGroupDetailsError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/episode_group/{tv_episode_group_id}",
  });
};

/**
 * Company
 * Search for companies by their original and alternative names.
 */
export const searchCompany = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchCompanyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchCompanyResponse,
    SearchCompanyError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/company",
  });
};

/**
 * Collection
 * Search for collections by their original, translated and alternative names.
 */
export const searchCollection = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchCollectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchCollectionResponse,
    SearchCollectionError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/collection",
  });
};

/**
 * Keyword
 * Search for keywords by their name.
 */
export const searchKeyword = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<SearchKeywordData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    SearchKeywordResponse,
    SearchKeywordError,
    ThrowOnError
  >({
    ...options,
    url: "/3/search/keyword",
  });
};

/**
 * Lists
 * Get the lists that a TV series has been added to.
 */
export const listsCopy = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<ListsCopyData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    ListsCopyResponse,
    ListsCopyError,
    ThrowOnError
  >({
    ...options,
    url: "/3/tv/{series_id}/lists",
  });
};
